<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-16T10:26:33.927Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统——进程管理</title>
    <link href="http://example.com/2023/08/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2023/08/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2023-08-12T06:59:51.000Z</published>
    <updated>2023-08-16T10:26:33.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程的概念、组成、特征"><a href="#进程的概念、组成、特征" class="headerlink" title="进程的概念、组成、特征"></a>进程的概念、组成、特征</h1><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><h3 id="从程序入手"><a href="#从程序入手" class="headerlink" title="从程序入手"></a>从程序入手</h3><p>程序为静态的，存放在磁盘里的可执行文件，一系列的指令集合</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>动态的，程序的一次执行过程<br>引入进程实体的概念后，进程定义为：进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位<br><font color = red>PCB是进程存在的唯一标志</font></p><h2 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h2><h3 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h3><p>当进程被创建时，操作系统会为该进程分配一个唯一的、不重复的ID——PID（Process ID）即进程ID</p><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><p>操作系统所记录的PID，进程所属用户ID（UID），给进程分配的资源，进程运行情况等等，均被保存在一个数据结构<font color = red>PCB</font>（Process Control Block）中，即<font color = red>进程控制块</font></p><blockquote><p>操作系统需要对各个并发运行的进程进行管理，但凡管理时需要的信息，都会被放在PCB中</p></blockquote><h3 id="进程实体"><a href="#进程实体" class="headerlink" title="进程实体"></a>进程实体</h3><p>一个进程实体（进程映像）由PCB、程序段、数据段组成。<br>进程是动态的，进程实体是静态的<br>进程实体反应了进程在某一时刻的状态</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/jincheng_zucheng.jpg"                      alt="进程的组成"                ></p><h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><h3 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h3><p>进程是程序的一次执行过程，是动态产生、变化、消亡的</p><h3 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h3><p>内存中有多个进程实体，各进程可并发执行</p><h3 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h3><p>进程是能独立运行、独立获得资源、独立接收调度的基本单位</p><h3 id="异步性"><a href="#异步性" class="headerlink" title="异步性"></a>异步性</h3><p>各进程各自独立、不可预知的速度向前推进</p><h3 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h3><p>每个进程对应配置一个PCB，结构上看，进程由程序段、数据段、PCB组成</p><h1 id="进程的状态和状态的转换"><a href="#进程的状态和状态的转换" class="headerlink" title="进程的状态和状态的转换"></a>进程的状态和状态的转换</h1><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><h3 id="创建态（新建态）"><a href="#创建态（新建态）" class="headerlink" title="创建态（新建态）"></a>创建态（新建态）</h3><p>进程正在被创建时，状态为“创建态”，操作系统会为进程分配资源、初始化PCB</p><h3 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h3><p>进程创建完成后，进入“就绪态”，该进程已经具备运行条件，但由于没有空闲cpu，暂时无法运行</p><h3 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h3><p>进程在cpu上运行，cpu正在执行对应的指令序列</p><h3 id="阻塞态（等待态）"><a href="#阻塞态（等待态）" class="headerlink" title="阻塞态（等待态）"></a>阻塞态（等待态）</h3><p>进程运行过程中，可能会请求等待某个事件的发生（如等待系统资源分配），在事件发生前，进程无法继续往下运行，此时操作系统会让进程下cpu，并让他进入“阻塞态”</p><h3 id="终止态（结束态）"><a href="#终止态（结束态）" class="headerlink" title="终止态（结束态）"></a>终止态（结束态）</h3><p>进程执行exit系统调用，请求操作系统终止该进程，此时该进程进入“终止态”，操作系统让该进程下cpu并回收内存空间等资源，最后回收该进程的PCB<br>当终止进程工作完成后该进程彻底消失</p><h2 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/jincheng_zhuanhuan.jpg"                                     ></p><h2 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h2><h3 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h3><p>使用指针将各个状态的PCB进行组织，如有执行指针指向当前处于运行态的进程，就绪队列指针指向处于就绪态的进程</p><h3 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h3><p>操作系统给各个状态的进程建立索引表，操作系统持有指向各个索引表的指针</p><blockquote><p>大部分操作系统采用链接方式</p></blockquote><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，实现进程状态的转化</p><h2 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h2><p>原语的执行具有原子性，执行过程不允许被中断<br>可以使用“关中断指令”和“开中断指令”两个特权指令实现原子性</p><blockquote><p>执行关中断指令后就不在检查中断信号，指导执行开中断指令之后才恢复检查</p></blockquote><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>进程间通信（Inter-Process Communication， IPC）是指两个进程之间产生数据交互</p><h2 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h2><h3 id="基于储存区的共享"><a href="#基于储存区的共享" class="headerlink" title="基于储存区的共享"></a>基于储存区的共享</h3><p>使用共享存储区，使其中的数据可以被多个进程进行读写，数据形式、存放位置都由通信进程控制，而不是操作系统。<br>这种共享方式速度很快，为高级通信方式</p><blockquote><p>为避免出错，各个进程对共享空间的访问应该是互斥的<br>各个进程可以使用操作系统内核提供的同步互斥工具如P、V操作</p></blockquote><h3 id="基于数据结构的共享"><a href="#基于数据结构的共享" class="headerlink" title="基于数据结构的共享"></a>基于数据结构的共享</h3><p>例如在共享空间内申请长度为10的数组，而后储存在该数组中的数据会被受到这个固定长度和类型的数组的限制<br>该方式速度慢，限制多，为低级通信方式</p><h2 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h2><p>数据交换以格式化的信息为单位，进程通过操作系统提供的“发送&#x2F;接收消息”两个原语进行数据交换</p><h3 id="直接通信方式"><a href="#直接通信方式" class="headerlink" title="直接通信方式"></a>直接通信方式</h3><p>消息发送进程要指明接收进程的ID</p><h3 id="间接通信方式"><a href="#间接通信方式" class="headerlink" title="间接通信方式"></a>间接通信方式</h3><p>通过“信箱”作为中间实体间接地通信，因此又称“信箱通信方式”</p><h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>“管道”是一个特殊的共享文件，又名pipe文件。其实就是在内存中开辟一个大小固定的内存缓冲区（FIFO），对于数据进出有严格要求，本质上是一个循环队列</p><blockquote><p>注意事项<br>1、管道只能采用半双工通信，某一时间段内只能实现单向的传输，如果要实现双向同时通信，则需要设置两个管道<br>2、各进程要互斥地访问管道（由操作系统实现）<br>3、当管道写满的时候，写进程将阻塞，指导都进程将管道中的数据取走<br>4、当管道为空时，读进程将阻塞，指导写进程往管道中写入数据<br>5、管道中的数据一旦被读出，就彻底消失，因此当多个进程读同一个管道时可能会错乱</p><blockquote><ul><li>解决方案1：一个管道允许多个写进程，一个读进程</li><li>解决方案2：允许多个写、读进程，但系统会让各个读进程轮流从管道中读数据（Linux方案）</li></ul></blockquote></blockquote><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程是一个基本的CPU执行单元，也是程序执行流的最小单位<br>不仅进程之间可以并发，线程之间也可以缤纷噶，从而进一步提高了系统的并发度</p><blockquote><p>引入线程后，进程只作为除了CPU之外的系统资源分配单元</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/xiancheng_diff.jpg"                      alt="引入线程带来的变化"                ></p><h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/xiancheng_shuxing.jpg"                      alt="线程的属性"                ></p><h1 id="线程的实现方式和多线程模型"><a href="#线程的实现方式和多线程模型" class="headerlink" title="线程的实现方式和多线程模型"></a>线程的实现方式和多线程模型</h1><h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><h3 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h3><p>使用线程库</p><blockquote><p>切换线程在用户态下进行<br>操作系统无法意识到用户级线程的存在</p></blockquote><h4 id="用户级线程优点"><a href="#用户级线程优点" class="headerlink" title="用户级线程优点"></a>用户级线程优点</h4><p>线程切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高</p><h4 id="用户级线程缺点"><a href="#用户级线程缺点" class="headerlink" title="用户级线程缺点"></a>用户级线程缺点</h4><p>如果其中一个线程被阻塞后，整个进程都会被阻塞，并发度不高<br>多个线程不可以在多个核心上运行</p><h3 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h3><p>由操作系统完成，由内核支持</p><h4 id="内核级线程优点"><a href="#内核级线程优点" class="headerlink" title="内核级线程优点"></a>内核级线程优点</h4><p>当一个线程被阻塞后，别的线程还可以继续执行，并发能力强，多线程可在多核处理机上并发执行</p><h4 id="内核级线程缺点"><a href="#内核级线程缺点" class="headerlink" title="内核级线程缺点"></a>内核级线程缺点</h4><p>一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理成本高，开销大</p><h2 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h2><blockquote><p>集合用户级线程和内核级线程</p></blockquote><p>根据用户级线程和内核级线程的映射关系，可以划分为几种多线程模型</p><h3 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h3><p>一个用户级线程映射到一个内核级线程</p><h4 id="一对一模型优点"><a href="#一对一模型优点" class="headerlink" title="一对一模型优点"></a>一对一模型优点</h4><p>并发能力强，多线程可在多核处理机上并发执行</p><h4 id="一对一模型缺点"><a href="#一对一模型缺点" class="headerlink" title="一对一模型缺点"></a>一对一模型缺点</h4><p>线程管理成本高，开销大</p><h3 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h3><p>多个用户级线程映射到一个内核级线程，且一个进程只分配一个内核级线程</p><h4 id="多对一模型优点"><a href="#多对一模型优点" class="headerlink" title="多对一模型优点"></a>多对一模型优点</h4><p>用户级线程的切换在用户空间即可完成，不需要切换到到核心态，系统开销小，效率高</p><h4 id="多对一模型缺点"><a href="#多对一模型缺点" class="headerlink" title="多对一模型缺点"></a>多对一模型缺点</h4><p>当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高</p><p><strong>操作系统只能感知内核级线程，因此只有内核级线程才是处理机分配的单位</strong></p><h3 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h3><p>n个用户及线程映射到m个内核级线程 <em>(n &gt;&#x3D; m)</em> 每个用户对应m个内核级线程</p><h4 id="多对多模型优点"><a href="#多对多模型优点" class="headerlink" title="多对多模型优点"></a>多对多模型优点</h4><p>克服了多对一模型并发度波高的缺点，又克服了一对一模型中一个用户进程占用太多内核级线程开销太大的缺点</p><h1 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/xiancheng_zhuanhuan.jpg"                                     ></p><h2 id="线程的组织与控制"><a href="#线程的组织与控制" class="headerlink" title="线程的组织与控制"></a>线程的组织与控制</h2><p>TCB 线程控制块<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/TCB.jpg"                                     ></p>]]></content>
    
    
    <summary type="html">操作系统之进程管理</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统——操作系统概述</title>
    <link href="http://example.com/2023/08/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2023/08/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2023-08-10T13:47:19.000Z</published>
    <updated>2023-08-11T14:09:02.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h1><p>操作系统是指控制和管理整个计算机系统的硬件与软件资源，合理地组织、调度计算机的工作和资源的分配，进而为用户和其他软件提供方便接口与环境的程序集合。<br>操作系统是计算机系统中最基本的软件系统</p><h1 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>指两个或多个事件再同一时间间隔内发生。<br>这些事件宏观上是同时发生的，但微观上是交替发生的</p><h3 id="易混淆概念"><a href="#易混淆概念" class="headerlink" title="易混淆概念"></a>易混淆概念</h3><p><strong>并行</strong> 指两个或多个事件再同一时刻同时发生</p><h3 id="操作系统的并发性"><a href="#操作系统的并发性" class="headerlink" title="操作系统的并发性"></a>操作系统的并发性</h3><p>计算机系统中“同时”运行着多个程序，这些程序宏观上是同时运行着的，而微观上看是交替运行的</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><font color = red>单核cpu</font>同一时刻只能执行<font color = red>一个程序</font>，各个程序只能<font color = red>并发</font>执行<br><font color = red>多核cpu</font>可以同时执行<font color = red>多个程序</font>多个程序可以<font color = red>并行</font>执行</p><blockquote><p>如 intel 第八代 i3 为四核cpu，意味着可以并行执行四个程序，如果有四个以上的程序需要同时运行，那么并发性依然是必不可少的</p></blockquote><h2 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h2><p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用</p><h3 id="两种资源共享方式"><a href="#两种资源共享方式" class="headerlink" title="两种资源共享方式"></a>两种资源共享方式</h3><h4 id="互斥共享"><a href="#互斥共享" class="headerlink" title="互斥共享"></a>互斥共享</h4><p>一个时间段内只允许一个进程访问该资源</p><h4 id="同时共享"><a href="#同时共享" class="headerlink" title="同时共享"></a>同时共享</h4><p>允许一个时间段内由多个进程“同时”对它们进行访问</p><blockquote><p>所谓“同时”往往是宏观上的，而在微观上这些进程可能是交替对该资源进行访问，即分时共享</p></blockquote><h3 id="并发和共享的关系"><a href="#并发和共享的关系" class="headerlink" title="并发和共享的关系"></a>并发和共享的关系</h3><p>如果失去并发性，则系统中只有一个程序运行，共享性失去存在意义<br>如果失去共享性，则两个进程无法同时访问同一资源（如无法同时访问硬盘资源无法实现同时发送完文件）也就无法并发<br><strong>并发性和共享性互为存在条件</strong></p><h2 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h2><p>指把物理上的实体变为若干个逻辑上的对应物<br>物理实体是实际存在的，而逻辑上对应物是用户感受到的</p><h3 id="虚拟技术中的“时分复用技术”"><a href="#虚拟技术中的“时分复用技术”" class="headerlink" title="虚拟技术中的“时分复用技术”"></a>虚拟技术中的“时分复用技术”</h3><p>微观上处理机在各个微小的时间段内交替为各个进程服务</p><blockquote><p>如果失去了并发性，则一个时间段内只需运行一道程序，那么就失去了虚拟性的意义。<br>没有并发性就谈不上虚拟性</p></blockquote><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进</p><blockquote><p>如果失去了并发性，即系统只能串行运行各个程序，那么每个程序的执行会一贯到底。<br><strong>只有系统拥有并发性，才有可能导致异步性</strong></p></blockquote><h1 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/dep_and_cate.jpg"                      alt="操作系统的发展与分类"                ></p><h1 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="cpu的两种状态"><a href="#cpu的两种状态" class="headerlink" title="cpu的两种状态"></a>cpu的两种状态</h3><p>cpu上会运行两种程序，一种是操作系统内核程序，一种是应用程序</p><blockquote><p>cpu中有一个寄存器名为<font color = red>程序状态字寄存器(PSW)</font> 其中有一个二进制位 1 为内核态 0 为用户态</p></blockquote><h4 id="内核态"><a href="#内核态" class="headerlink" title="内核态"></a>内核态</h4><p>处于内核态时，说明正在运行内核程序，可以执行特权指令</p><h4 id="用户态"><a href="#用户态" class="headerlink" title="用户态"></a>用户态</h4><p>处于用户态时，说明正在运行应用程序，只能执行非特权指令</p><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>内核态 &#x3D; 核心态 &#x3D; 管态<br>用户态 &#x3D; 目态</p><h2 id="内核态和用户态的切换"><a href="#内核态和用户态的切换" class="headerlink" title="内核态和用户态的切换"></a>内核态和用户态的切换</h2><p>一个例子</p><blockquote><p>1、刚开机时，cpu为内核态，操作系统内核程序先上cpu运行<br>2、开机完成后，用户可以启动某个应用程序<br>3、操作系统内核程序在合适的时候主动让出cpu（用一条特殊指令把PSW的标志位设置为用户态），让该应用程序在cpu上运行<br>4、应用程序在用户态运行<br>5、此时黑客在应用程序中植入了一条特权指令企图破坏系统<br>6、cpu发现接下去的指令为特权指令但此时处于用户态<br>7、非法事件引发中断信号，立即变为核心态并停止运行当前应用程序，转而处理中断信号的内核程序<br>8、中断使擦欧总系统再次夺回cpu控制权<br>9、操作系统对引发中断的事件进行处理，处理后再把cpu使用权交给其他应用程序</p></blockquote><h2 id="变态"><a href="#变态" class="headerlink" title="变态"></a>变态</h2><h3 id="内核态-gt-用户态"><a href="#内核态-gt-用户态" class="headerlink" title="内核态-&gt;用户态"></a>内核态-&gt;用户态</h3><p>一条PSW特权指令修改寄存器标志位</p><h3 id="用户态-gt-内核态"><a href="#用户态-gt-内核态" class="headerlink" title="用户态-&gt;内核态"></a>用户态-&gt;内核态</h3><p>由中断引起，硬件自动完成</p><h1 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h1><h2 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h2><p>中断是让操作系统内核夺回cpu使用权的唯一途径</p><h2 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h2><h3 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h3><p>与当前执行的指令有关，中断信号来源于cpu内部，也称异常、例外</p><blockquote><p>1、陷阱、陷入（由陷入指令引发，应用程序故意引发）<br>2、故障（由错误条件引起，可能被内核程序修复，内核程序修复后会将cpu使用权交还给应用程序，使其继续执行）<br>3、终止（由致命错误引起，内核程序一般无法修复，一般直接终止该应用程序）</p></blockquote><blockquote><p>eg1.例如试图在用户态下执行特权指令<br>eg2.执行除法时发现除数为0(指令非法)<br>eg3.应用程序想请求操作系统内核的服务，执行的<font color = red>陷入指令</font></p></blockquote><blockquote><p>陷入指令一位置应用程序主动把cpu控制权还给操作系统内核 并非特殊指令<br>系统调用就是通过陷入指令完成的</p></blockquote><h3 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h3><blockquote><p>在每个指令周期末尾，cpu都会检查是否有外中断信号需要处理</p></blockquote><p>与当前执行的指令无关,中断信号来源于cpu外部，也称“中断”</p><blockquote><p>1、时钟中断<br>2、io中断 由输入&#x2F;输出设备发来的中断信号</p></blockquote><h2 id="中断机制基本原理"><a href="#中断机制基本原理" class="headerlink" title="中断机制基本原理"></a>中断机制基本原理</h2><p>不同的中断信号需要不同的中断处理程序来处理<br>当cpu检测到中断信号后，会根据中断信号的类型来查询“中断向量表”，依次来找到相应的中断处理程序在内存中的存放位置</p><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>操作系统提供给应用程序使用的接口，可以理解为一种可供程序调用的特殊函数<br><strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong></p><h2 id="什么功能需要用到系统调用"><a href="#什么功能需要用到系统调用" class="headerlink" title="什么功能需要用到系统调用"></a>什么功能需要用到系统调用</h2><p>凡是与共享资源有关的操作，如储存分配、io操作、文件管理等，都必须通过系统调用的方式向操作系统内核提出服务请求，由操作系统内核代为完成，这样可以<font color = red>保证系统的稳定和安全性</font>，防止用户非法操作</p><h2 id="系统调用按功能进行分类"><a href="#系统调用按功能进行分类" class="headerlink" title="系统调用按功能进行分类"></a>系统调用按功能进行分类</h2><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><p>完成设备的 请求&#x2F;释放&#x2F;启动 等功能</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>完成文件的 读&#x2F;写&#x2F;创建&#x2F;删除 等功能</p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>完成进程的 创建&#x2F;撤销&#x2F;阻塞&#x2F;唤醒 等功能</p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>完成进程之间的 消息传递&#x2F;信号传递 等功能</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>完成内存的 分配&#x2F;回收 等功能</p><h2 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h2><blockquote><p>1、在用户态下，程序输入传参指令，向寄存器中传入必要寄存器参数<br>2、传入陷入指令，引发内中断，转入响应中断的处理程序（即系统调用的入口程序）<br>3、在内核态下处理系统调用入口程序，根据寄存器中的参数判断用户需要的系统调用服务<br>4、执行完系统调用服务后，cpu转回用户态继续执行剩下的程序</p></blockquote><blockquote><p>注意：<br>1、陷入指令是在用户态执行的，执行陷入指令后立即引发一个内中断，使cpu进入核心态<br>2、发出系统调用请求实在用户态，而对系统调用的相应处理在核心态下进行</p></blockquote><h1 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h1><h2 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h2><blockquote><p>内核时操作系统最基本最核心的部分<br>实现操作系统内核功能的那些程序就是内核程序</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/os_kernel.jpg"                      alt="操作系统内核"                ></p><blockquote><p>操作系统内核需要运行在内核态<br>操作系统的非内核功能运行在用户态</p></blockquote><h3 id="大内核"><a href="#大内核" class="headerlink" title="大内核"></a>大内核</h3><p>将操作系统的主要功能模块都作为系统内核，运行在核心态</p><blockquote><p>优点：高性能<br>缺点：内核代码庞大，结构混乱，难以维护</p></blockquote><h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>只把最基本的功能保留在内核</p><blockquote><p>优点：内核功能少，结构清晰，方便维护<br>缺点：需要频繁地在核心态和用户态之间切换，性能低</p></blockquote><blockquote><p><em>典型大内核操作系统：Linux、UNIX</em><br><em>典型微内核操作系统：Windows NT</em></p></blockquote><h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/os_structure.jpg"                      alt="操作系统结构"                ></p><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><p>最底层是硬件，最高层是用户接口，每一层可且只可调用更低一层的接口</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>将内核划分为多个模块，各模块之间相互写作</p><h3 id="宏内核（大内核）"><a href="#宏内核（大内核）" class="headerlink" title="宏内核（大内核）"></a>宏内核（大内核）</h3><p>所有系统功能均放在内核中</p><h3 id="微内核-1"><a href="#微内核-1" class="headerlink" title="微内核"></a>微内核</h3><p>只把中断、原语、进程通信等最核心的功能放入内核</p><h3 id="外核"><a href="#外核" class="headerlink" title="外核"></a>外核</h3><p>外核负责为用户进程分配未经抽象的硬件资源且保证其使用安全</p><h1 id="操作系统的引导"><a href="#操作系统的引导" class="headerlink" title="操作系统的引导"></a>操作系统的引导</h1><p>操作系统引导（开机过程）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/yindao.jpg"                      alt="操作系统引导 开机过程"                ></p><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p>使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器，每个虚拟机器可以独立运行一个操作系统</p><h2 id="第一类虚拟机管理程序"><a href="#第一类虚拟机管理程序" class="headerlink" title="第一类虚拟机管理程序"></a>第一类虚拟机管理程序</h2><p>直接运行在硬件上</p><h2 id="第二类虚拟机管理程序"><a href="#第二类虚拟机管理程序" class="headerlink" title="第二类虚拟机管理程序"></a>第二类虚拟机管理程序</h2><p>运行在宿主操作系统上</p><h2 id="两类虚拟机管理程序对比"><a href="#两类虚拟机管理程序对比" class="headerlink" title="两类虚拟机管理程序对比"></a>两类虚拟机管理程序对比</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/os/vmm_conpare.jpg"                                     ></p>]]></content>
    
    
    <summary type="html">操作系统概述</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>在jetson的conda虚拟环境中安装tensorrt</title>
    <link href="http://example.com/2023/07/21/%E5%9C%A8jetson%E7%9A%84conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%AE%89%E8%A3%85tensorrt/"/>
    <id>http://example.com/2023/07/21/%E5%9C%A8jetson%E7%9A%84conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%AE%89%E8%A3%85tensorrt/</id>
    <published>2023-07-21T06:29:43.000Z</published>
    <updated>2023-07-21T06:37:04.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>jetson系列出场的python自带tensorRT<br>由于使用conda的关系，又是会需要在虚拟环境中安装tensorRT</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><blockquote><p>找到默认python中的tensorrt并在conda虚拟环境中建立软连接</p></blockquote><blockquote><p>以我的环境为例<br>我的系统上的为python3.8 ，其tensorrt位于<code>/usr/lib/python3.8/dist-packages/tensorrt*</code><br>conda虚拟环境中的虚拟环境文件夹为<code>~/archiconda3/envs/py38/lib/python3.8/site-packages</code><br>故我的建立软链接为</p></blockquote><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/lib/python3.8/dist-packages/tensorrt* ~/archiconda3/envs/py38/lib/python3.8/site-packages</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">在Jetson Orin Nano - Ubuntu20.04 上的conda虚拟环境中安装tensorrt</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Conda" scheme="http://example.com/tags/Conda/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
    <category term="TensorRT" scheme="http://example.com/tags/TensorRT/"/>
    
  </entry>
  
  <entry>
    <title>使用TensorRT加速Yolo</title>
    <link href="http://example.com/2023/07/20/%E4%BD%BF%E7%94%A8TensorRT%E5%8A%A0%E9%80%9FYolo/"/>
    <id>http://example.com/2023/07/20/%E4%BD%BF%E7%94%A8TensorRT%E5%8A%A0%E9%80%9FYolo/</id>
    <published>2023-07-20T08:14:12.000Z</published>
    <updated>2023-07-21T09:30:43.876Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/tensorrt/tensorrt.jpg"                      alt="tensorrt"                ></p><blockquote><p>使用TensorRT加速Yolov5模型<br>使用版本为<a class="link"   href="https://github.com/wang-xinyu/tensorrtx/tree/yolov5-v7.0" >TensorRT-Yolov5-v7.0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, <a class="link"   href="https://github.com/ultralytics/yolov5/tree/v7.0" >Yolov5 v7.0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><blockquote><p>以yolov5s.pt为例，进行目标检测</p></blockquote><h1 id="下载工程源码"><a href="#下载工程源码" class="headerlink" title="下载工程源码"></a>下载工程源码</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照版本进行项目克隆 yolo与tensorrt的版本需一致</span></span><br><span class="line">git <span class="built_in">clone</span> -b v7.0 https://github.com/ultralytics/yolov5.git</span><br><span class="line">git <span class="built_in">clone</span> -b yolov5-v7.0 https://github.com/wang-xinyu/tensorrtx.git</span><br></pre></td></tr></table></figure></div><h1 id="获取-wts-文件"><a href="#获取-wts-文件" class="headerlink" title="获取 wts 文件"></a>获取 <code>wts</code> 文件</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由pt转换</span></span><br><span class="line"><span class="built_in">cd</span> yolov5/</span><br><span class="line">wget https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt</span><br><span class="line"><span class="built_in">cp</span> [PATH-TO-TENSORRTX]/yolov5/gen_wts.py .</span><br><span class="line">python gen_wts.py -w yolov5s.pt -o yolov5s.wts</span><br></pre></td></tr></table></figure></div><blockquote><p>也可以直接从model zoo中下载</p></blockquote><h1 id="编译tensorrt工程"><a href="#编译tensorrt工程" class="headerlink" title="编译tensorrt工程"></a>编译tensorrt工程</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [PATH-TO-TENSORRTX]/yolov5/</span><br><span class="line"><span class="comment"># 若为自己训练的模型需要在 yololayer.h 中进行响应更改类别数量等</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">cp</span> [PATH-TO-ultralytics-yolov5]/yolov5s.wts . </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div><blockquote><p>我在这 <code>make</code> 中出现了报错 <code>/usr/bin/ld: warning: libnvcudla.so, needed by /usr/local/cuda/lib64/libcudla.so.1, not found (try using -rpath or -rpath-link)</code><br>这里我查出来是因为我的这个地址是存在软连接的，而不是实存在的路径，后我在 <code>CMakeLists.txt</code> 中把有关的cuda路换为不存在软连接的路径，问题解决 </p></blockquote><h1 id="转换-wts-为-engine-文件"><a href="#转换-wts-为-engine-文件" class="headerlink" title="转换 wts 为 engine 文件"></a>转换 <code>wts</code> 为 <code>engine</code> 文件</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yolov5_det -s yolov5s.wts yolov5s.engine s</span><br></pre></td></tr></table></figure></div><blockquote><p>注意两个文件的路径问题</p></blockquote><h1 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h1><blockquote><p>在获取 <code>engine</code> 文件后就可以利用其进行预测，使用 <code>engine</code> 进行预测将自动调用tensorrt 如在之前的路径下</p></blockquote><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yolov5_det -d yolov5.engine ../images</span><br></pre></td></tr></table></figure></div><p>即可对它提供的两张照片_zidane.jpg 和 _bus.jpg进行预测</p><p>也可以只用python进行调用</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要下载python-tensorrt, pycuda, etc.</span></span><br><span class="line">python yolov5_det_trt.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用CUDA-python代替pycuda</span></span><br><span class="line">python yolov5_det_trt_cuda_python.py</span><br></pre></td></tr></table></figure></div><h1 id="小捷径"><a href="#小捷径" class="headerlink" title="小捷径"></a>小捷径</h1><p>如果不使用c++进行推理，而只用tensorrt对python项目进行加速，是可以直接在yolo项目中使用 <code>export.py</code> 将 <code>pt</code> 直接转为 <code>engine</code>，程序会直接调用tensorrt的包进行转换，具体使用例子如</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python export.py --include engine --weights yolov5s.pt --device 0 --half</span><br></pre></td></tr></table></figure></div><blockquote><p>其中我指定了几个常用参数<br><code>--include engine</code> 为要转换的目标模型，tensorrt的目标为engine<br><code>--weights yolov5s.pt</code> 为被转换的模型文件，这里我们欲将yolov5s.pt进行转换<br><code>--device 0</code> 为指定设备为cuda: 0，由于tensorrt限制，这里必须使用gpu进行export，可根据gpu设备号修改数字<br><code>--half</code> 表示半精度推理<br>除了以上，还有非常多参数可以根据需求选择，具体可查看yolo项目 <code>export.py</code> 中的参数</p></blockquote><h1 id="TensorRT的使用"><a href="#TensorRT的使用" class="headerlink" title="TensorRT的使用"></a>TensorRT的使用</h1><p>只需要在使用模型推理时，指定模型权重文件为对应的 <code>.engine</code> 即可</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p>如分类、分割等与其类似，可以参考<a class="link"   href="https://github.com/wang-xinyu/tensorrtx/tree/yolov5-v7.0/yolov5" >官方介绍 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行操作</p></blockquote>]]></content>
    
    
    <summary type="html">使用TensorRT加速Yolov5模型</summary>
    
    
    
    <category term="深度学习模型" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="yolo" scheme="http://example.com/tags/yolo/"/>
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="TensorRT" scheme="http://example.com/tags/TensorRT/"/>
    
  </entry>
  
  <entry>
    <title>rplidarA1-gmapping</title>
    <link href="http://example.com/2023/06/30/rplidarA1-gmapping/"/>
    <id>http://example.com/2023/06/30/rplidarA1-gmapping/</id>
    <published>2023-06-30T07:35:47.000Z</published>
    <updated>2023-07-09T09:36:20.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>所参考的大佬教程如下 <br><a class="link"   href="https://blog.csdn.net/qq_43961980/article/details/118113609" >大佬1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://blog.csdn.net/weixin_46781669/article/details/107738966?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242" >大佬2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://blog.csdn.net/VampireWolf/article/details/90042517" >大佬3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="前情介绍"><a href="#前情介绍" class="headerlink" title="前情介绍"></a>前情介绍</h1><blockquote><p>任务背景为：要使用思岚A1M8激光雷达实现建图及避障、导航等功能<br>本次为实现建图</p></blockquote><blockquote><p>Gmapping是基于滤波SLAM框架的常用开源SLAM算法，在ROS中使用Gmapping建图需要提供 Odometry(里程计信息)和laser(激光数据)，但是只用一个激光雷达也可以进行Gmapping建图</p><blockquote><p>其实我们是有双目相机T265可以提供姿态信息的，但受限于当前知识水平，暂且使用较为方便的Gmapping算法进行操作</p></blockquote></blockquote><blockquote><p>采用的方法就是使用 laser_scan_matcher 功能包，其为增量激光扫描配准工具。该软件包允许扫描连续的 sensor_msgs &#x2F; LaserScan 消息之间的匹配，并将估计的激光位置发布为 geometry_msgs &#x2F; Pose2D 或 tf 变换。该包可以在没有其他传感器提供的任何测距估计的情况下使用。因此，它可以作为独立的里程计算器估算器。</p></blockquote><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h2 id="创建工作空间"><a href="#创建工作空间" class="headerlink" title="创建工作空间"></a>创建工作空间</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据自己习惯创建工作空间</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/rplidar_ws/src &amp;&amp; <span class="built_in">cd</span> ~/rplidar_ws/src</span><br></pre></td></tr></table></figure></div><h2 id="下载所需的功能包"><a href="#下载所需的功能包" class="headerlink" title="下载所需的功能包"></a>下载所需的功能包</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Slamtec/rplidar_ros.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/CCNYRoboticsLab/scan_tools.git</span><br></pre></td></tr></table></figure></div><h2 id="获取gmapping功能包"><a href="#获取gmapping功能包" class="headerlink" title="获取gmapping功能包"></a>获取gmapping功能包</h2><blockquote><p>网址为：<a class="link"   href="https://github.com/CCNYRoboticsLab/scan_tools.git" >https://github.com/CCNYRoboticsLab/scan_tools.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <br>下载或克隆仓库后将其中的gmapping文件夹复制到工作空间下的src中（比如我的就是<code>~/rplidar_ws/src</code>）</p></blockquote><h2 id="接着下载必要功能包"><a href="#接着下载必要功能包" class="headerlink" title="接着下载必要功能包"></a>接着下载必要功能包</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将melodic替换为自己的ros版本</span></span><br><span class="line">sudo apt-get install ros-melodic-csm</span><br><span class="line">sudo apt-get install ros-melodic-gmapping</span><br></pre></td></tr></table></figure></div><h2 id="编译工作空间"><a href="#编译工作空间" class="headerlink" title="编译工作空间"></a>编译工作空间</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入工作空间</span></span><br><span class="line"><span class="built_in">cd</span> ~/rplidar_ws</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></div><h2 id="修改启动launch文件"><a href="#修改启动launch文件" class="headerlink" title="修改启动launch文件"></a>修改启动launch文件</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Library/rplidar_ws/src/scan_tools-indigo/laser_scan_matcher/demo</span><br></pre></td></tr></table></figure></div><blockquote><p>这里原先的<code>demo_gmapping.launch</code>文件则为启动launch文件，这里要做的就是修改它以实行自己的设备<br>这里提供我的launch文件</p></blockquote><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Example launch file: uses laser_scan_matcher together with</span></span><br><span class="line"><span class="comment">slam_gmapping </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  #### set up data playback from bag #############################</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;/use_sim_time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;flase&quot;</span>/&gt;</span><span class="comment">&lt;!-- 因为Gmapping 的simulation 时间是True, 改为false  网上查到的--&gt;</span></span><br><span class="line"></span><br><span class="line">  #### rplidar_a2 ################################################</span><br><span class="line">  <span class="comment">&lt;!--激光雷达的启动文件--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rplidarNode&quot;</span>          <span class="attr">pkg</span>=<span class="string">&quot;rplidar_ros&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;rplidarNode&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial_port&quot;</span>         <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/dev/ttyUSB0&quot;</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial_baudrate&quot;</span>     <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>    <span class="attr">value</span>=<span class="string">&quot;115200&quot;</span>/&gt;</span> <span class="comment">&lt;!-- A1波特率 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;frame_id&quot;</span>            <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;laser&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;inverted&quot;</span>            <span class="attr">type</span>=<span class="string">&quot;bool&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;angle_compensate&quot;</span>    <span class="attr">type</span>=<span class="string">&quot;bool&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;scan_mode&quot;</span>           <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Sensitivity&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  #### publish an example base_link -&gt; laser transform ###########</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;base_link_to_laser&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;0.0 0.0 0.0 0.0 0.0 0.0 /base_link /laser 40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  #### start rviz ################################################</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">args</span>=<span class="string">&quot;-d $(find laser_scan_matcher)/demo/demo_gmapping.rviz&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  #### start the laser scan_matcher ##############################</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;laser_scan_matcher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;laser_scan_matcher_node&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;laser_scan_matcher_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;fixed_frame&quot;</span> <span class="attr">value</span> = <span class="string">&quot;odom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max_iterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame&quot;</span> <span class="attr">value</span> = <span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_odom&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publy_pose&quot;</span> <span class="attr">value</span> = <span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publy_tf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  #### start gmapping ############################################</span><br><span class="line"><span class="comment">&lt;!--前三个param必须设置修改，要不然tf_tree不完整--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gmapping&quot;</span> <span class="attr">type</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/base_link&quot;</span>/&gt;</span> <span class="comment">&lt;!--***机器人的坐标系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/odom&quot;</span> /&gt;</span> <span class="comment">&lt;!--***世界坐标系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;map_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/map&quot;</span> /&gt;</span> <span class="comment">&lt;!--***地图坐标系--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;map_udpate_interval&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;maxUrange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;sigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kernelSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lstep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.15&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;astep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.15&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;iterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lsigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ogain&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lskip&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;stt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;linearUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;angularUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;temporalUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.4&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;resampleThreshold&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;particles&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;delta&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>其中 重点修改的为</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rplidarNode&quot;</span>          <span class="attr">pkg</span>=<span class="string">&quot;rplidar_ros&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;rplidarNode&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial_port&quot;</span>         <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/dev/ttyUSB0&quot;</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;serial_baudrate&quot;</span>     <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>    <span class="attr">value</span>=<span class="string">&quot;115200&quot;</span>/&gt;</span> <span class="comment">&lt;!-- A1波特率 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;frame_id&quot;</span>            <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;laser&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;inverted&quot;</span>            <span class="attr">type</span>=<span class="string">&quot;bool&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;angle_compensate&quot;</span>    <span class="attr">type</span>=<span class="string">&quot;bool&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;scan_mode&quot;</span>           <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Sensitivity&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>第一行的<code>rplidarNode</code>及<code>rplidar_ros</code>需要按照自己的激光雷达启动节点而定<br>第三行的波特率数值需要根据雷达而定 如我的A1M8为115200</p></blockquote><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><blockquote><p>以下需要在同一终端中进行</p></blockquote><h2 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/rplidar_ws/devel/setup.bash</span><br></pre></td></tr></table></figure></div><h2 id="给串口权限"><a href="#给串口权限" class="headerlink" title="给串口权限"></a>给串口权限</h2><p>可以使用</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /dev/*</span><br></pre></td></tr></table></figure></div><p>进行查询，如我的是<code>ttyUSB0</code><br>则输入</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /dev/ttyUSB0</span><br></pre></td></tr></table></figure></div><h2 id="运行launch文件"><a href="#运行launch文件" class="headerlink" title="运行launch文件"></a>运行launch文件</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch  laser_scan_matcher demo_gmapping.launch</span><br></pre></td></tr></table></figure></div><blockquote><p>其中<code>demo_gmapping.launch</code>可以根据自己修改的launch文件而修改</p></blockquote>]]></content>
    
    
    <summary type="html">基于Jetson平台，使用思岚A1激光雷达运行gmapping进行建图</summary>
    
    
    
    <category term="无人机" scheme="http://example.com/categories/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
    <category term="Ros" scheme="http://example.com/tags/Ros/"/>
    
    <category term="rplidarA1" scheme="http://example.com/tags/rplidarA1/"/>
    
    <category term="Slam" scheme="http://example.com/tags/Slam/"/>
    
    <category term="Gmapping" scheme="http://example.com/tags/Gmapping/"/>
    
  </entry>
  
  <entry>
    <title>acfly-mavros</title>
    <link href="http://example.com/2023/06/28/acfly-mavros/"/>
    <id>http://example.com/2023/06/28/acfly-mavros/</id>
    <published>2023-06-28T02:37:24.000Z</published>
    <updated>2023-06-30T08:21:54.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此为为Jetson配置Intel T265，以此为acfly飞控提供定位<br>官方参考教程：<a class="link"   href="https://github.com/IntelRealSense/realsense-ros" >realsense-ros <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>     <a class="link"   href="https://github.com/CGC12123/acfly-mavros" >acfly-mavros <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="ROS-Wrapper"><a href="#ROS-Wrapper" class="headerlink" title="ROS Wrapper"></a>ROS Wrapper</h1><blockquote><p>T265使用所需的packages</p></blockquote><h2 id="安装-ROS"><a href="#安装-ROS" class="headerlink" title="安装 ROS"></a>安装 ROS</h2><blockquote><p>Install <a class="link"   href="http://wiki.ros.org/kinetic/Installation/Ubuntu" >ROS Kinetic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Ubuntu 16.04, <a class="link"   href="http://wiki.ros.org/melodic/Installation/Ubuntu" >ROS Melodic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Ubuntu 18.04, <a class="link"   href="http://wiki.ros.org/noetic/Installation/Ubuntu" >ROS Noetic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Ubuntu 20.04.<br><a class="link"   href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/12-roskai-fa-gong-ju-an-zhuang/124-an-zhuang-ros.html" >可参考autolabor的安装教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="安装realsense2-camera"><a href="#安装realsense2-camera" class="headerlink" title="安装realsense2_camera"></a>安装realsense2_camera</h2><p>realsense2_camera 可作为 ROS 发行版的 debian 软件包使用</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-$ROS_DISTRO-realsense2-camera</span><br></pre></td></tr></table></figure></div><h1 id="安装mavros"><a href="#安装mavros" class="headerlink" title="安装mavros"></a>安装mavros</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-catkin-tools python-rosinstall-generator -y</span><br><span class="line"># 如果用的ROS版本是Noetic则使用</span><br><span class="line"># sudo apt install python3-catkin-tools python3-rosinstall-generator python3-osrf-pycommon -y</span><br><span class="line"></span><br><span class="line"># 需要替换你的ROS版本，且以下指令需要在同一个终端执行</span><br><span class="line">source /opt/ros/$&#123;你的ROS版本&#125;/setup.bash</span><br><span class="line"></span><br><span class="line"># 因为acfly增加了自定义mavlink信息，若之前有通过二进制安装过mavros则需要卸载，没有则跳过</span><br><span class="line">sudo apt purge ros-$&#123;ROS_DISTRO&#125;-mavlink ros-$&#123;ROS_DISTRO&#125;-mavros</span><br><span class="line"></span><br><span class="line"># 构建ROS工作空间，可以自行修改路径</span><br><span class="line">mkdir -p ~/acfly_ws/src &amp;&amp; cd ~/acfly_ws</span><br><span class="line">catkin init</span><br><span class="line"></span><br><span class="line"># 下载mavlink和acfly-mavros</span><br><span class="line">cd src</span><br><span class="line">git clone -b release/$&#123;ROS_DISTRO&#125;/mavlink/2022.1.5-1 https://gitee.com/LauZanMo/mavlink</span><br><span class="line">git clone -b acfly-develop https://gitee.com/LauZanMo/acfly-mavros</span><br><span class="line"># 以下两个为非官方文档中提供</span><br><span class="line">git clone https://github.com/thien94/vision_to_mavros.git</span><br><span class="line">git clone https://github.com/IntelRealSense/librealsense.git</span><br><span class="line"></span><br><span class="line"># 安装依赖，如果rosdep update没执行则需要执行成功才能继续</span><br><span class="line">cd .. &amp;&amp; rosdep install --from-paths src --ignore-src -y</span><br><span class="line"></span><br><span class="line"># 安装GeographicLib:</span><br><span class="line">./src/acfly-mavros/mavros/scripts/install_geographiclib_datasets.sh</span><br><span class="line"># 注意此处可能会报需要root权限（不会标error）出现后在前方加sudo即可</span><br><span class="line"></span><br><span class="line"># 第一次编译请执行acfly提供的脚本</span><br><span class="line">./src/acfly-mavros/update_custom_msg.sh</span><br><span class="line"># 后续更改mavros源码只需要执行catkin build</span><br><span class="line"></span><br><span class="line"># 每一次开启终端都需要设置环境变量</span><br><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure></div><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一个终端</span><br><span class="line"># 打开t265</span><br><span class="line">roslaunch realsense2_camera rs_t265.launch</span><br><span class="line"></span><br><span class="line"># 第二个终端</span><br><span class="line"># 添加权限</span><br><span class="line">sudo chmod 777 /dev/ttyAMA0</span><br><span class="line">roslaunch mavros acfly.launch fcu_url:=/dev/ttyUSB0:57600</span><br><span class="line"></span><br><span class="line"># 第三个终端</span><br><span class="line"># 此处需要先source前一步安装mavros工作空间中的setup.bash</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch vision_to_mavros t265_tf_to_mavros.launch</span><br></pre></td></tr></table></figure></div><h1 id="其他-使用指南"><a href="#其他-使用指南" class="headerlink" title="其他 使用指南"></a>其他 使用指南</h1><blockquote><p>acfly-mavros 作者提供了使用指南及二次开发指南<br><a class="link"   href="https://github.com/LauZanMo/acfly-mavros/blob/acfly-develop/acfly-mavros%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.md" >使用指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/LauZanMo/acfly-mavros/blob/acfly-develop/acfly-mavros%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.md" >二次开发指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="关于自启动"><a href="#关于自启动" class="headerlink" title="关于自启动"></a>关于自启动</h1><a href="/2023/05/08/Ubuntu%E8%87%AA%E5%8A%A8%E8%84%9A%E6%9C%AC/" title="Ubuntu自启动脚本">自启动可看这篇</a>]]></content>
    
    
    <summary type="html">基于Jetson平台，使用Intel T265为acfly飞控提供定位</summary>
    
    
    
    <category term="无人机" scheme="http://example.com/categories/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    
    <category term="无人机" scheme="http://example.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    <category term="双目相机" scheme="http://example.com/tags/%E5%8F%8C%E7%9B%AE%E7%9B%B8%E6%9C%BA/"/>
    
    <category term="T265" scheme="http://example.com/tags/T265/"/>
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
    <category term="Ros" scheme="http://example.com/tags/Ros/"/>
    
  </entry>
  
  <entry>
    <title>vnc远程连接jetson</title>
    <link href="http://example.com/2023/05/10/vnc%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5jetson/"/>
    <id>http://example.com/2023/05/10/vnc%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5jetson/</id>
    <published>2023-05-10T13:55:24.000Z</published>
    <updated>2023-05-10T14:16:52.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>事件背景为使用 <code>windows</code> 端的 <code>vnc viewer</code> 远程连接 <code>jetson orin nano</code></p></blockquote><h1 id="在nano端安装-vncserver"><a href="#在nano端安装-vncserver" class="headerlink" title="在nano端安装 vncserver"></a>在<code>nano端</code>安装 <code>vncserver</code></h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vncserver</span><br></pre></td></tr></table></figure></div><h1 id="开启vncserver"><a href="#开启vncserver" class="headerlink" title="开启vncserver"></a>开启vncserver</h1><p>在<code>nano</code>终端使用</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure></div><p>或</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver -geometry 1366x768 :1 </span><br><span class="line"># geometry设置vnc屏幕的大小，1为端口</span><br></pre></td></tr></table></figure></div><p>按照要求设置好密码后，会出现如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/nano/server%20start.jpg"                                     ></p><blockquote><p>图示为在端口1开启</p></blockquote><p>使用</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep -i vnc</span><br></pre></td></tr></table></figure></div><p>即可查询在使用vnc的进程</p><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><p>打开 <code>windows</code> 端的 <code>vnc</code>，在上方输入 <code>ip:端口号</code> ，如<code>192.168.1.1:1</code></p><h1 id="出现的问题一"><a href="#出现的问题一" class="headerlink" title="出现的问题一"></a>出现的问题一</h1><h2 id="报错如下"><a href="#报错如下" class="headerlink" title="报错如下"></a>报错如下</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The connection was refused by the computer</span><br></pre></td></tr></table></figure></div><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>原因为nano端的vncserver没开，在终端输入</p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure></div><p>或</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver -geometry 1366x768 :1 </span><br><span class="line"># geometry设置vnc屏幕的大小，1为端口</span><br></pre></td></tr></table></figure></div><p>重启 <code>windows</code> 的 <code>vnc</code> 即可</p><h1 id="出现问题二"><a href="#出现问题二" class="headerlink" title="出现问题二"></a>出现问题二</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>屏幕显示灰色并且鼠标是×型符号 下方出现<code>unencrypted connection</code></p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a>关闭端口</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver -kill :1</span><br><span class="line"># kill 端口为1的进程，注意:1前面要加空格</span><br></pre></td></tr></table></figure></div><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开配置文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.vnc/xstartup</span><br><span class="line"># 打开配置文件</span><br></pre></td></tr></table></figure></div><p>修改配置文件为</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Uncomment the following two lines for normal desktop:</span><br><span class="line"># unset SESSION_MANAGER</span><br><span class="line"># exec /etc/X11/xinit/xinitrc</span><br><span class="line"></span><br><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup</span><br><span class="line">[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources</span><br><span class="line">xsetroot -solid grey</span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;</span><br><span class="line">x-window-manager &amp;</span><br><span class="line"></span><br><span class="line">#gnome-terminal &amp;</span><br><span class="line"></span><br><span class="line">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class="line">xfce4-menu-plugin &amp;</span><br><span class="line">xfsettingsd &amp;</span><br><span class="line">xfconfd &amp;</span><br><span class="line">xfwm4 &amp;</span><br></pre></td></tr></table></figure></div><p>之后再打开vnc即可解决</p>]]></content>
    
    
    <summary type="html">使用VNC远程连接JetsonOrin Nano</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Jetson Orin Nano" scheme="http://example.com/tags/Jetson-Orin-Nano/"/>
    
    <category term="VNC" scheme="http://example.com/tags/VNC/"/>
    
    <category term="远程连接" scheme="http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu自启动脚本</title>
    <link href="http://example.com/2023/05/08/Ubuntu%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2023/05/08/Ubuntu%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2023-05-08T10:16:30.000Z</published>
    <updated>2023-07-24T02:56:51.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h1><p>任务背景为在Jetson Orin Nano上使用t265时，需要同时按序开启并执行三个不同终端<br>如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch realsense2_camera rs_t265.launch</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加权限</span><br><span class="line">sudo chmod 777 /dev/ttyAMA0</span><br><span class="line">roslaunch mavros acfly.launch fcu_url:=/dev/ttyUSB0:57600</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开t265文件夹，打开终端</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch vision_to_mavros t265_tf_to_mavros.launch</span><br></pre></td></tr></table></figure></div><h1 id="脚本的写法"><a href="#脚本的写法" class="headerlink" title="脚本的写法"></a>脚本的写法</h1><p>使用</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh1 = <span class="string">&quot;/home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_1.sh&quot;</span></span><br><span class="line">subprocess.Popen([<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, sh1, <span class="string">&#x27;--hold&#x27;</span>], </span><br><span class="line">                stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"><span class="comment"># sh1为需要在该终端执行的命令</span></span><br></pre></td></tr></table></figure></div><p>其中sh1为事先写好的bash脚本，例如</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">roslaunch realsense2_camera rs_t265.launch</span><br></pre></td></tr></table></figure></div><p>若有若干命令需要在同一终端中执行，则为</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sh2s = [<span class="string">&quot;echo 123456 | sudo -S chmod +x /home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_2.sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sudo chmod 777 /dev/ttyUSB0&quot;</span>, </span><br><span class="line">        <span class="string">&quot;/home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_2.sh&quot;</span>]</span><br><span class="line">sh2 = <span class="string">&quot;bash -c &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;; &quot;</span>.join(sh2s))</span><br><span class="line">subprocess.Popen([<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, sh2, <span class="string">&#x27;--hold&#x27;</span>], </span><br><span class="line">                stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br></pre></td></tr></table></figure></div><blockquote><p>需要注意的是：<br>在一个终端中执行的需要放在同一个中，不能使用 <code>os.system</code> ，使用  <code>os.system</code> 则会回到最初始的终端中执行<br><code>subprocess.Popen</code> 创建的终端，若终端执行结束或出现报错，则该终端会被杀死消失，可使用 <code>--hold</code> 使其保持开启</p></blockquote><p>所以我的最终启动脚本为</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">T265_Start</span>():</span><br><span class="line">    sh1 = <span class="string">&quot;/home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_1.sh&quot;</span></span><br><span class="line">    sh2s = [<span class="string">&quot;echo 123456 | sudo -S chmod +x /home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_2.sh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sudo chmod 777 /dev/ttyUSB0&quot;</span>, </span><br><span class="line">            <span class="string">&quot;/home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_2.sh&quot;</span>]</span><br><span class="line">    sh2 = <span class="string">&quot;bash -c &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;; &quot;</span>.join(sh2s))</span><br><span class="line">    sh3 = <span class="string">&quot;/home/c/Library/Cv_for_Orinnano/utils/bash/T265_Start_3.sh&quot;</span></span><br><span class="line"></span><br><span class="line">    subprocess.Popen([<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, sh1, <span class="string">&#x27;--hold&#x27;</span>], </span><br><span class="line">                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    subprocess.Popen([<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, sh2, <span class="string">&#x27;--hold&#x27;</span>], </span><br><span class="line">                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    subprocess.Popen([<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, sh3, <span class="string">&#x27;--hold&#x27;</span>], </span><br><span class="line">                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><h1 id="自启动的设置"><a href="#自启动的设置" class="headerlink" title="自启动的设置"></a>自启动的设置</h1>]]></content>
    
    
    <summary type="html">在Jetson Orin Nano - Ubuntu20.04中设置开启开机自启动，且该脚本适用于开启多终端任务场景</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
  </entry>
  
  <entry>
    <title>git的安装配置</title>
    <link href="http://example.com/2023/04/10/git%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/04/10/git%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2023-04-10T13:10:28.000Z</published>
    <updated>2023-04-10T13:49:41.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>可在官方网站上下载，网站：<a class="link"   href="https://git-scm.com//" >https://git-scm.com/\ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>也可在国内镜像源下载，网站：<a class="link"   href="http://npm.taobao.org/mirrors/git-for-windows" >http://npm.taobao.org/mirrors/git-for-windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></div><h1 id="github账号的注册"><a href="#github账号的注册" class="headerlink" title="github账号的注册"></a>github账号的注册</h1><p>进入github，注册账号，网站：<a class="link"   href="https://github.com/" >https://github.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>在此处要注意记住你注册时的用户名和邮箱</p></blockquote><h1 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h1><h2 id="找到git命令行输入处"><a href="#找到git命令行输入处" class="headerlink" title="找到git命令行输入处"></a>找到git命令行输入处</h2><h3 id="方法1-Windows"><a href="#方法1-Windows" class="headerlink" title="方法1-Windows"></a>方法1-Windows</h3><p>在文件夹中右键，点击 <code>git bash</code> ，没有也没关系，很可能会没有</p><h3 id="方法2-Windows"><a href="#方法2-Windows" class="headerlink" title="方法2-Windows"></a>方法2-Windows</h3><p>按 <code>win+r</code> 后输入 <code>cmd</code> （在默认路径下呼出）<br>或 在你的目标文件夹下点击上面的框，输入 <code>cmd</code> 然后回车可以在当前路径下呼出 <code>cmd</code> </p><h3 id="方法3-Ubuntu"><a href="#方法3-Ubuntu" class="headerlink" title="方法3-Ubuntu"></a>方法3-Ubuntu</h3><p>直接在终端中输入 <code>git</code> 命令即可</p><h2 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h2><p>在命令行中输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br></pre></td></tr></table></figure></div><blockquote><p>此处 <code>username</code> 是自己的用户名</p></blockquote><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p>在命令行中输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;username@email.com&quot;</span><br></pre></td></tr></table></figure></div><blockquote><p>此处 <code>username@email.com</code> 是自己的邮箱</p></blockquote><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><p>在命令行中输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list </span><br></pre></td></tr></table></figure></div><blockquote><p>输出内容可以检查你的配置信息是否争取，如有误可以回到前面的配置步骤进行更改</p></blockquote><p>至此，git下载及配置完成</p><h1 id="git常用命令的学习"><a href="#git常用命令的学习" class="headerlink" title="git常用命令的学习"></a>git常用命令的学习</h1><p>推荐一个教程网站：<a class="link"   href="https://learngitbranching.js.org/?locale=zh_CN" >https://learngitbranching.js.org/?locale=zh_CN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">git的安装配置及github账号的注册</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>启动virtualbox虚拟机发生错误警告</title>
    <link href="http://example.com/2023/04/10/%E5%90%AF%E5%8A%A8virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF%E8%AD%A6%E5%91%8A/"/>
    <id>http://example.com/2023/04/10/%E5%90%AF%E5%8A%A8virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF%E8%AD%A6%E5%91%8A/</id>
    <published>2023-04-10T11:40:40.000Z</published>
    <updated>2023-04-16T11:17:36.557Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>部分问题解决参考自 <a class="link"   href="https://blog.csdn.net/m0_53688587/article/details/125074012" >https://blog.csdn.net/m0_53688587/article/details/125074012 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>启动virtualbox虚拟机显示Attempted to kill the idle task错误 如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/ubuntu/problem.jpg"                                     ></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>这个问题我出现过两次</p><h2 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h2><p>第一次出现这个问题是在刚装 <code>WSL2</code> 后的一段时间，突然的改变让我意识到可能是 <code>WSL2</code> 的安装出了问题</p><p>排除 <code>WSL2</code> 或虚拟机本身问题后<br>查了很多问题 最后发现<br>大部分问题原因出在 <code>hyper-v</code> 的设置上<br>只需启动或关闭 <code>hyper-v</code> 服务即可解决问题</p><blockquote><p>在“控制面板”中，打开“程序和功能” <br>选择“启用或关闭 Windows 功能” <br>展开 Hyper-V ，展开 Hyper-V 平台 ，然后清除“Hyper-V 虚拟机监控程序” 复选框。</p></blockquote><h2 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h2><p>当我第二次发现这个问题时，距离上次使用虚拟机已经过去和很长时间了，于是我按照第一次的经验，熟练的进行操作<br>耶？竟然不管用<br>于是，我有又开始疯狂查，最后，发现似乎是分配到cpu和内存资源不够<br>解决的操作如下</p><blockquote><p>在 <code>virtualbox</code> 界面下，进入设置，找到系统设置中的处理器分配，把处理器数量加到2及以上，为了放心，我还在下方的显示窗口中将显存分配提高到32以上，至此，问题解决。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/ubuntu/sulution1.jpg"                                     ></p></blockquote><blockquote><p>虽然感觉可能问题的解决是在我先前关闭 <code>hyper-v</code> 有关，但增加处理器数和显存分配大小确实解决了我的问题<br> 如果只进行了一般的操作，问题还是没解决，可用参考我的两次经历来回试试看</p></blockquote>]]></content>
    
    
    <summary type="html">启动virtualbox虚拟机显示Attempted to kill the idle task错误</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu20.04" scheme="http://example.com/tags/Ubuntu20-04/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Ubuntu22.04" scheme="http://example.com/tags/Ubuntu22-04/"/>
    
    <category term="虚拟机" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="virtualbox" scheme="http://example.com/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22.04换源</title>
    <link href="http://example.com/2023/04/09/Ubuntu22.04%E6%8D%A2%E6%BA%90/"/>
    <id>http://example.com/2023/04/09/Ubuntu22.04%E6%8D%A2%E6%BA%90/</id>
    <published>2023-04-09T08:27:31.000Z</published>
    <updated>2023-04-10T11:41:42.189Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此为由20.04直接copy而来 未经验证</p></blockquote><h1 id="备份环境变量文件"><a href="#备份环境变量文件" class="headerlink" title="备份环境变量文件"></a>备份环境变量文件</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></div><blockquote><p>sources.list 即储存环境变量的文件</p></blockquote><h1 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div><blockquote><p>进入文件后按<code>i</code>或<code>insert</code>启动输入模式 删除原有内容</p></blockquote><blockquote><p>可在进入输入模式前在航首按<code>dd</code>删除当前行 或<code>dG</code>删除光标以后所有内容</p></blockquote><p>删除内容后使用新源进行替换</p><p><strong>阿里源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>清华源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>中科大源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>网易163源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>还源完成后</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></div><p>让计算机根据源进行更新</p>]]></content>
    
    
    <summary type="html">Ubuntu22.04更换国内源，提高速度</summary>
    
    
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Ubuntu22.04" scheme="http://example.com/tags/Ubuntu22-04/"/>
    
  </entry>
  
  <entry>
    <title>在树莓派上安装Ros</title>
    <link href="http://example.com/2023/04/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E5%AE%89%E8%A3%85Ros/"/>
    <id>http://example.com/2023/04/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E5%AE%89%E8%A3%85Ros/</id>
    <published>2023-04-09T07:05:31.000Z</published>
    <updated>2023-07-09T09:36:26.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考自<a class="link"   href="https://blog.csdn.net/Kevin555666888/article/details/107207719" >https://blog.csdn.net/Kevin555666888/article/details/107207719 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><blockquote><p>若源可用或源没问题可不换</p></blockquote><h2 id="更换源信息"><a href="#更换源信息" class="headerlink" title="更换源信息"></a>更换源信息</h2><blockquote><p>以下为中科大源</p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></pre></td></tr></table></figure></div><h2 id="设置key"><a href="#设置key" class="headerlink" title="设置key"></a>设置key</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver &#x27;hkp://keyserver.ubuntu.com:80&#x27; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure></div><h2 id="进行更新"><a href="#进行更新" class="headerlink" title="进行更新"></a>进行更新</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></div><h1 id="安装ROS"><a href="#安装ROS" class="headerlink" title="安装ROS"></a>安装ROS</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure></div><blockquote><p>若在此处报错可能是源出了问题 可不断使用<code>sudo apt-get update</code> 和 <code>sudo apt-get upgrade</code>进行更新或更换网络</p></blockquote><h1 id="安装ROS依赖"><a href="#安装ROS依赖" class="headerlink" title="安装ROS依赖"></a>安装ROS依赖</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure></div><blockquote><p>若显示rosdep不是内部命令 则</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosdep update</span><br></pre></td></tr></table></figure></div></blockquote><hr><p>我在安装此处的时候出现的比较诡异的报错</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: cannot download default sources list from:</span><br><span class="line">https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/sources.list.d/20-default.list</span><br><span class="line">Website may be down.</span><br></pre></td></tr></table></figure></div><p>看过别人的解决(来自<a class="link"   href="https://mp.weixin.qq.com/s/VGs8oWdhHH6XsHcx21lN4Q)/" >https://mp.weixin.qq.com/s/VGs8oWdhHH6XsHcx21lN4Q)\ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>方法如下<br>安装</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install rosdepc</span><br></pre></td></tr></table></figure></div><p>若没有显示pip则可尝试</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip </span><br></pre></td></tr></table></figure></div><p>如果还是没有 则</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip </span><br><span class="line">sudo pip install rosdepc</span><br></pre></td></tr></table></figure></div><p>在这之后再次运行 应该可用解决</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdepc init</span><br><span class="line">rosdepc update</span><br></pre></td></tr></table></figure></div><blockquote><p>和前面的差别是<code>rosdep</code>换成了<code>rosdepc</code><br>是一个国内大佬做的</p><p>至此 完美解决问题</p></blockquote><h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></div><h1 id="安装便利工具"><a href="#安装便利工具" class="headerlink" title="安装便利工具"></a>安装便利工具</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure></div><h1 id="验证安装——运行实例"><a href="#验证安装——运行实例" class="headerlink" title="验证安装——运行实例"></a>验证安装——运行实例</h1><blockquote><p>打开第一个终端 输入：<code>roscore</code><br>打开第二个终端 输入：<code>rosrun turtlesim turtlesim_node</code><br>此时会打开一个有一个乌龟的窗口<br>打开第三个终端 输入：<code>rosrun turtlesim turtle_teleop_key</code><br>选择第三个终端 然后按键盘上的方向键就可以控制小乌龟运动了。</p></blockquote><blockquote><p>如果此时乌龟动起来了 表明安装成功</p></blockquote>]]></content>
    
    
    <summary type="html">在树莓派上进行Ros安装</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ros" scheme="http://example.com/tags/Ros/"/>
    
    <category term="树莓派" scheme="http://example.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Yolov8初体验</title>
    <link href="http://example.com/2023/03/26/Yolov8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2023/03/26/Yolov8%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2023-03-26T11:11:53.000Z</published>
    <updated>2023-07-10T03:47:38.631Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ultralytics YOLOv8 是由 Ultralytics 开发的一个前沿的 SOTA 模型。它在以前成功的 YOLO 版本基础上，引入了新的功能和改进，进一步提升了其性能和灵活性。YOLOv8 基于快速、准确和易于使用的设计理念，使其成为广泛的目标检测、图像分割和图像分类任务的绝佳选择。<br><a class="link"   href="https://github.com/ultralytics/ultralytics" >官方源码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="Yolov8的快速部署使用"><a href="#Yolov8的快速部署使用" class="headerlink" title="Yolov8的快速部署使用"></a>Yolov8的快速部署使用</h1><h2 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h2><p>基础调用如</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo predict model=yolov8n.pt source=&#x27;https://ultralytics.com/images/bus.jpg&#x27;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>predict</code> 为任务模式，可选择<code>detect</code>, <code>classify</code>, <code>segment</code> 分别对应检测、分类、分割<br><code>model</code> 为所使用模型 主要有<code>YOLOv8n</code>, <code>YOLOv8s</code>,<code>YOLOv8m</code>,<code>YOLOv8l</code>, <code>YOLOv8x</code><br><code>source</code> 为目标，可指向图片或视频，填 <code>0</code> 为调用摄像头<br><a class="link"   href="https://docs.ultralytics.com/usage/cfg/" >完整参数配置可点击此处查看 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="Python调用"><a href="#Python调用" class="headerlink" title="Python调用"></a>Python调用</h2><p>和使用命令行相似<br>例如</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.yaml&quot;</span>)  <span class="comment"># 从头开始构建新模型</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># 加载预训练模型（推荐用于训练）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the model</span></span><br><span class="line">results = model.train(data=<span class="string">&quot;coco128.yaml&quot;</span>, epochs=<span class="number">3</span>)  <span class="comment"># 训练模型</span></span><br><span class="line">results = model.val()  <span class="comment"># 在验证集上评估模型性能</span></span><br><span class="line">results = model(<span class="string">&quot;https://ultralytics.com/images/bus.jpg&quot;</span>)  <span class="comment"># 预测图像</span></span><br><span class="line">success = model.export(<span class="built_in">format</span>=<span class="string">&quot;onnx&quot;</span>)  <span class="comment"># 将模型导出为 ONNX 格式</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Ultralytics YOLOv8 是由 Ultralytics 开发的一个前沿的 SOTA 模型。它在以前成功的 YOLO 版本基础上，引入了新的功能和改进，进一步提升了其性能和灵活性。YOLOv8 基于快速、准确和易于使用的设计理念，使其成为</summary>
      
    
    
    
    <category term="深度学习模型" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="计算机视觉" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="yolo" scheme="http://example.com/tags/yolo/"/>
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用mmyolo快速搭建yolo网络</title>
    <link href="http://example.com/2023/03/26/%E4%BD%BF%E7%94%A8mmyolo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAyolo%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2023/03/26/%E4%BD%BF%E7%94%A8mmyolo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAyolo%E7%BD%91%E7%BB%9C/</id>
    <published>2023-03-26T06:43:05.000Z</published>
    <updated>2023-07-09T12:06:42.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明：<br>此为根据实践搭建并从官方文档中整理而来，官方源码及文档如下<br><a class="link"   href="https://github.com/open-mmlab/mmyolo" >官方开源项目源码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://mmyolo.readthedocs.io/zh_CN/latest/get_started/15_minutes_object_detection.html#id1" >官方使用文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="使用conda创建新环境并安装pytorch"><a href="#使用conda创建新环境并安装pytorch" class="headerlink" title="使用conda创建新环境并安装pytorch"></a>使用conda创建新环境并安装pytorch</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create -n mmyolo python=3.8 -y</span><br><span class="line">conda activate mmyolo</span><br><span class="line"># 如果你有 GPU</span><br><span class="line">conda install pytorch torchvision -c pytorch</span><br><span class="line"># 如果你是 CPU</span><br><span class="line"># conda install pytorch torchvision cpuonly -c pytorch</span><br></pre></td></tr></table></figure></div><h2 id="安装-MMYOLO-和依赖库"><a href="#安装-MMYOLO-和依赖库" class="headerlink" title="安装 MMYOLO 和依赖库"></a>安装 MMYOLO 和依赖库</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/open-mmlab/mmyolo.git</span><br><span class="line">cd mmyolo</span><br><span class="line">pip install -U openmim</span><br><span class="line">mim install -r requirements/mminstall.txt</span><br><span class="line"># Install albumentations</span><br><span class="line">mim install -r requirements/albu.txt</span><br><span class="line"># Install MMYOLO</span><br><span class="line">mim install -v -e .</span><br><span class="line"># &quot;-v&quot; 指详细说明，或更多的输出</span><br><span class="line"># &quot;-e&quot; 表示在可编辑模式下安装项目，因此对代码所做的任何本地修改都会生效，从而无需重新安装。</span><br></pre></td></tr></table></figure></div><h1 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h1><p>此处数据集为官方文档中演示所用的Cat 数据集，为包括144张图片的单类别数据集<br>在上一步中克隆的mmyolo源码中，使用如下命令即可自动下载目标数据集</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/misc/download_dataset.py --dataset-name cat --save-dir ./data/cat --unzip --delete</span><br></pre></td></tr></table></figure></div><blockquote><p><code>data/cat/annotations</code> 中存放的是 COCO 格式的标注，<code>data/cat/images</code> 中存放的是所有图片</p></blockquote><h1 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h1><p>官方源码中已经为我们提供了yolov5等的配置文件，位于<code>configs</code>中，我们只需要继承这些配置文件，并按照需求进行相应修改即可<br>官方所给的配置案例为</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于该配置进行继承并重写部分配置</span></span><br><span class="line">_base_ = <span class="string">&#x27;./configs/yolov5/yolov5_s-v61_syncbn_fast_8xb16-300e_coco.py&#x27;</span></span><br><span class="line"></span><br><span class="line">data_root = <span class="string">&#x27;./data/cat/&#x27;</span> <span class="comment"># 数据集根路径</span></span><br><span class="line">class_name = (<span class="string">&#x27;cat&#x27;</span>, ) <span class="comment"># 数据集类别名称</span></span><br><span class="line">num_classes = <span class="built_in">len</span>(class_name) <span class="comment"># 数据集类别数</span></span><br><span class="line"><span class="comment"># metainfo 必须要传给后面的 dataloader 配置，否则无效</span></span><br><span class="line"><span class="comment"># palette 是可视化时候对应类别的显示颜色</span></span><br><span class="line"><span class="comment"># palette 长度必须大于或等于 classes 长度</span></span><br><span class="line">metainfo = <span class="built_in">dict</span>(classes=class_name, palette=[(<span class="number">20</span>, <span class="number">220</span>, <span class="number">60</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 tools/analysis_tools/optimize_anchors.py 自适应计算的 anchor</span></span><br><span class="line">anchors = [</span><br><span class="line">    [(<span class="number">68</span>, <span class="number">69</span>), (<span class="number">154</span>, <span class="number">91</span>), (<span class="number">143</span>, <span class="number">162</span>)],  <span class="comment"># P3/8</span></span><br><span class="line">    [(<span class="number">242</span>, <span class="number">160</span>), (<span class="number">189</span>, <span class="number">287</span>), (<span class="number">391</span>, <span class="number">207</span>)],  <span class="comment"># P4/16</span></span><br><span class="line">    [(<span class="number">353</span>, <span class="number">337</span>), (<span class="number">539</span>, <span class="number">341</span>), (<span class="number">443</span>, <span class="number">432</span>)]  <span class="comment"># P5/32</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 最大训练 40 epoch</span></span><br><span class="line">max_epochs = <span class="number">40</span></span><br><span class="line"><span class="comment"># bs 为 12</span></span><br><span class="line">train_batch_size_per_gpu = <span class="number">12</span></span><br><span class="line"><span class="comment"># dataloader 加载进程数</span></span><br><span class="line">train_num_workers = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 COCO 预训练权重</span></span><br><span class="line">load_from = <span class="string">&#x27;https://download.openmmlab.com/mmyolo/v0/yolov5/yolov5_s-v61_syncbn_fast_8xb16-300e_coco/yolov5_s-v61_syncbn_fast_8xb16-300e_coco_20220918_084700-86e02187.pth&#x27;</span>  <span class="comment"># noqa</span></span><br><span class="line"></span><br><span class="line">model = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="comment"># 固定整个 backbone 权重，不进行训练</span></span><br><span class="line">    backbone=<span class="built_in">dict</span>(frozen_stages=<span class="number">4</span>),</span><br><span class="line">    bbox_head=<span class="built_in">dict</span>(</span><br><span class="line">        head_module=<span class="built_in">dict</span>(num_classes=num_classes),</span><br><span class="line">        prior_generator=<span class="built_in">dict</span>(base_sizes=anchors)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">train_dataloader = <span class="built_in">dict</span>(</span><br><span class="line">    batch_size=train_batch_size_per_gpu,</span><br><span class="line">    num_workers=train_num_workers,</span><br><span class="line">    dataset=<span class="built_in">dict</span>(</span><br><span class="line">        data_root=data_root,</span><br><span class="line">        metainfo=metainfo,</span><br><span class="line">        <span class="comment"># 数据集标注文件 json 路径</span></span><br><span class="line">        ann_file=<span class="string">&#x27;annotations/trainval.json&#x27;</span>,</span><br><span class="line">        <span class="comment"># 数据集前缀</span></span><br><span class="line">        data_prefix=<span class="built_in">dict</span>(img=<span class="string">&#x27;images/&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">val_dataloader = <span class="built_in">dict</span>(</span><br><span class="line">    dataset=<span class="built_in">dict</span>(</span><br><span class="line">        metainfo=metainfo,</span><br><span class="line">        data_root=data_root,</span><br><span class="line">        ann_file=<span class="string">&#x27;annotations/test.json&#x27;</span>,</span><br><span class="line">        data_prefix=<span class="built_in">dict</span>(img=<span class="string">&#x27;images/&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">test_dataloader = val_dataloader</span><br><span class="line"></span><br><span class="line">_base_.optim_wrapper.optimizer.batch_size_per_gpu = train_batch_size_per_gpu</span><br><span class="line"></span><br><span class="line">val_evaluator = <span class="built_in">dict</span>(ann_file=data_root + <span class="string">&#x27;annotations/test.json&#x27;</span>)</span><br><span class="line">test_evaluator = val_evaluator</span><br><span class="line"></span><br><span class="line">default_hooks = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="comment"># 每隔 10 个 epoch 保存一次权重，并且最多保存 2 个权重</span></span><br><span class="line">    <span class="comment"># 模型评估时候自动保存最佳模型</span></span><br><span class="line">    checkpoint=<span class="built_in">dict</span>(interval=<span class="number">10</span>, max_keep_ckpts=<span class="number">2</span>, save_best=<span class="string">&#x27;auto&#x27;</span>),</span><br><span class="line">    <span class="comment"># warmup_mim_iter 参数非常关键，因为 cat 数据集非常小，默认的最小 warmup_mim_iter 是 1000，导致训练过程学习率偏小</span></span><br><span class="line">    param_scheduler=<span class="built_in">dict</span>(max_epochs=max_epochs, warmup_mim_iter=<span class="number">10</span>),</span><br><span class="line">    <span class="comment"># 日志打印间隔为 5</span></span><br><span class="line">    logger=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoggerHook&#x27;</span>, interval=<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 评估间隔为 10</span></span><br><span class="line">train_cfg = <span class="built_in">dict</span>(max_epochs=max_epochs, val_interval=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><p>可以直接复制使用，也可以进行进一步修改</p><blockquote><p>其中 <code>_base_ = &#39;yolov5_s-v61_syncbn_fast_8xb16-300e_coco.py&#39;</code> 修改所继承的配置文件，从 <code>configs</code> 中选取</p></blockquote><p>将如上继承后的文件另行保存至任意位置即可（需记下路径）</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>在命令行中使用指令运行如</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/train.py configs/yolov5/yolov5_s-v61_fast_1xb12-40e_cat.py</span><br></pre></td></tr></table></figure></div><blockquote><p><code>tools/train.py</code> 为训练脚本<br><code>configs/yolov5/yolov5_s-v61_fast_1xb12-40e_cat.py</code> 为上一步中所说的配置文件，可直接使用官方所给，也可以使用自己所集成修改的，将此参数改为上一步中继承后的文件的路径即可</p></blockquote><blockquote><p>运行以上训练命令 <code>work_dirs/yolov5_s-v61_fast_1xb12-40e_cat</code> 文件夹会被自动生成，权重文件以及此次的训练配置文件将会保存在此文件夹中。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在训练过程中会打印如下两个关键警告：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are using YOLOv5Head with num_classes == 1. The loss_cls will be 0. This is a normal phenomenon.\</span><br><span class="line">The model and loaded state dict do not match exactly</span><br></pre></td></tr></table></figure></div><p>这两个警告都不会对性能有任何影响。第一个警告是说明由于当前训练的类别数是 1，根据 YOLOv5 算法的社区， 分类分支的 loss 始终是 0，这是正常现象。第二个警告是因为目前是采用微调模式进行训练，我们加载了 COCO 80 个类的预训练权重， 这会导致最后的 Head 模块卷积通道数不对应，从而导致这部分权重无法加载，这也是正常现象。</p><h2 id="训练中断后恢复训练"><a href="#训练中断后恢复训练" class="headerlink" title="训练中断后恢复训练"></a>训练中断后恢复训练</h2><p>如果训练中途停止，可以在训练命令最后加上 <code>--resume</code> ,程序会自动从 <code>work_dirs</code> 中加载最新的权重文件恢复训练。<br>例如</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/train.py configs/yolov5/yolov5_s-v61_fast_1xb12-40e_cat.py --resume</span><br></pre></td></tr></table></figure></div><h2 id="节约显存策略"><a href="#节约显存策略" class="headerlink" title="节约显存策略"></a>节约显存策略</h2><p>如果显存不够，可以考虑开启混合精度训练<code>--amp</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/train.py configs/yolov5/yolov5_s-v61_fast_1xb12-40e_cat.py --amp</span><br></pre></td></tr></table></figure></div><h2 id="训练可视化"><a href="#训练可视化" class="headerlink" title="训练可视化"></a>训练可视化</h2><p>官方文档中展示了多种可视化方案，在此处我们使用<code>tensorboard</code><br>在先前我们已经配置好的配置文件中的最后加入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visualizer = dict(vis_backends=[dict(type=&#x27;LocalVisBackend&#x27;), dict(type=&#x27;TensorboardVisBackend&#x27;)])</span><br></pre></td></tr></table></figure></div><p>重新运行训练命令后，Tensorboard 文件会生成在可视化文件夹 <code>work_dirs/yolov5_s-v61_fast_1xb12-40e_cat.py/&#123;timestamp&#125;/vis_data</code> 下， 运行下面的命令便可以在网页链接使用 Tensorboard 查看 loss、学习率和 coco&#x2F;bbox_mAP 等可视化数据了：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=work_dirs/yolov5_s-v61_fast_1xb12-40e_cat.py</span><br></pre></td></tr></table></figure></div><blockquote><p>其中最后一个.py文件参数为配置文件</p></blockquote><h1 id="模型测试及预测"><a href="#模型测试及预测" class="headerlink" title="模型测试及预测"></a>模型测试及预测</h1><h2 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h2><p>运行如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python tools/test.py configs/yolov5/yolov5_s-v61_fast_1xb12-40e_cat.py \</span><br><span class="line">                     work_dirs/yolov5_s-v61_fast_1xb12-40e_cat/epoch_40.pth \</span><br><span class="line">                     --show-dir show_results</span><br></pre></td></tr></table></figure></div><blockquote><p>两个文件参数分别为配置文件、权重文件</p></blockquote><p>运行以上测试命令， 不仅可以得到模型训练部分所打印的 AP 性能，还可以将推理结果图片自动保存至 <code>work_dirs/yolov5_s-v61_fast_1xb12-40e_cat/&#123;timestamp&#125;/show_results</code> 文件夹中。</p><p>如果使用了 <code>WandbVisBackend</code> 或者 <code>TensorboardVisBackend</code>，则还可以在浏览器窗口可视化模型推理结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;说明：&lt;br&gt;此为根据实践搭建并从官方文档中整理而来，官方源码及文档如下&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/open-mmlab/mmyolo&quot; &gt;官方开源项目源码 &lt;i class=&quot;fa</summary>
      
    
    
    
    <category term="深度学习模型" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="计算机视觉" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="yolo" scheme="http://example.com/tags/yolo/"/>
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="openmmlab" scheme="http://example.com/tags/openmmlab/"/>
    
  </entry>
  
  <entry>
    <title>使用mmdet快速搭建识别模型网络</title>
    <link href="http://example.com/2023/03/22/%E4%BD%BF%E7%94%A8mmdet%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2023/03/22/%E4%BD%BF%E7%94%A8mmdet%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%BD%91%E7%BB%9C/</id>
    <published>2023-03-22T09:29:27.000Z</published>
    <updated>2023-03-26T08:21:31.496Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://github.com/open-mmlab/mmdetection/tree/master" >点击此处访问openmmdetection源码仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h1><p>使用命令行下载配置文件和模型权重文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim download mmyolo --config yolov5_s-v61_syncbn_fast_8xb16-300e_coco --dest .</span><br></pre></td></tr></table></figure></div><h1 id="搭建识别网络"><a href="#搭建识别网络" class="headerlink" title="搭建识别网络"></a>搭建识别网络</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> init_detector, inference_detector</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">&#x27;configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py&#x27;</span></span><br><span class="line">checkpoint_file = <span class="string">&#x27;checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth&#x27;</span></span><br><span class="line">device = <span class="string">&#x27;cuda:0&#x27;</span></span><br><span class="line"><span class="comment"># 初始化检测器</span></span><br><span class="line">model = init_detector(config_file, checkpoint_file, device=device)</span><br><span class="line"><span class="comment"># 推理演示图像</span></span><br><span class="line">inference_detector(model, <span class="string">&#x27;demo.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/open-mmlab/mmdetection/tree/master&quot; &gt;点击此处访问openmmdetection源码仓库 &lt;i class=&quot;fa-regular fa-arrow-u</summary>
      
    
    
    
    <category term="深度学习模型" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="计算机视觉" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="openmmlab" scheme="http://example.com/tags/openmmlab/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu20.04换源</title>
    <link href="http://example.com/2023/03/22/Ubuntu20.04%E6%8D%A2%E6%BA%90/"/>
    <id>http://example.com/2023/03/22/Ubuntu20.04%E6%8D%A2%E6%BA%90/</id>
    <published>2023-03-22T06:12:45.000Z</published>
    <updated>2023-04-10T11:41:38.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备份环境变量文件"><a href="#备份环境变量文件" class="headerlink" title="备份环境变量文件"></a>备份环境变量文件</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></div><blockquote><p>sources.list 即储存环境变量的文件</p></blockquote><h1 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div><blockquote><p>进入文件后按<code>i</code>或<code>insert</code>启动输入模式 删除原有内容</p></blockquote><blockquote><p>可在进入输入模式前在航首按<code>dd</code>删除当前行 或<code>dG</code>删除光标以后所有内容</p></blockquote><p>删除内容后使用新源进行替换</p><p><strong>阿里源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>清华源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>中科大源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>网易163源</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></div><p><strong>还源完成后</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></div><p>让计算机根据源进行更新</p>]]></content>
    
    
    <summary type="html">Ubuntu20.04更换国内源，提高速度</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu20.04" scheme="http://example.com/tags/Ubuntu20-04/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Conda-常用指令</title>
    <link href="http://example.com/2023/03/22/Conda-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2023/03/22/Conda-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2023-03-22T05:54:22.000Z</published>
    <updated>2023-06-30T08:23:15.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda-环境管理"><a href="#conda-环境管理" class="headerlink" title="conda 环境管理"></a>conda 环境管理</h1><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n name python=3.x</span><br></pre></td></tr></table></figure></div><blockquote><p>name为环境名<br>3.x为指定python版本</p></blockquote><h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n name --all</span><br></pre></td></tr></table></figure></div><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate name</span><br></pre></td></tr></table></figure></div><h2 id="关闭环境-返回默认环境"><a href="#关闭环境-返回默认环境" class="headerlink" title="关闭环境 返回默认环境"></a>关闭环境 返回默认环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate name</span><br></pre></td></tr></table></figure></div><h2 id="查看当前有哪些环境"><a href="#查看当前有哪些环境" class="headerlink" title="查看当前有哪些环境"></a>查看当前有哪些环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure></div><p><em>或</em></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure></div><h1 id="conda包管理"><a href="#conda包管理" class="headerlink" title="conda包管理"></a>conda包管理</h1><h2 id="查看当前环境的包"><a href="#查看当前环境的包" class="headerlink" title="查看当前环境的包"></a>查看当前环境的包</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></div><h2 id="安装指定package到当前环境"><a href="#安装指定package到当前环境" class="headerlink" title="安装指定package到当前环境"></a>安装指定package到当前环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install package</span><br></pre></td></tr></table></figure></div><blockquote><p>package 为所需包名字 可在后加入<code>==</code>指定版本或输入url指定安装源</p></blockquote><p><em>也可以使用pip等进行安装</em></p><h2 id="安装package到指定的环境"><a href="#安装package到指定的环境" class="headerlink" title="安装package到指定的环境"></a>安装package到指定的环境</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n name package</span><br></pre></td></tr></table></figure></div><h2 id="更新package"><a href="#更新package" class="headerlink" title="更新package"></a>更新package</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update -n name package</span><br></pre></td></tr></table></figure></div><h2 id="移除package"><a href="#移除package" class="headerlink" title="移除package"></a>移除package</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n name package</span><br></pre></td></tr></table></figure></div><p><em>或</em></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda uninstall package</span><br></pre></td></tr></table></figure></div><h1 id="conda版本"><a href="#conda版本" class="headerlink" title="conda版本"></a>conda版本</h1><h2 id="更新conda版本"><a href="#更新conda版本" class="headerlink" title="更新conda版本"></a>更新conda版本</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure></div><h2 id="更新python版本"><a href="#更新python版本" class="headerlink" title="更新python版本"></a>更新python版本</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update python</span><br></pre></td></tr></table></figure></div><blockquote><p>假设当前环境是python 3.6 执行命令后conda会将python升级为3.6.x系列的当前最新版本</p></blockquote>]]></content>
    
    
    <summary type="html">conda环境管理及包管理等的常用指令</summary>
    
    
    
    <category term="环境配置及相关工具" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Conda" scheme="http://example.com/tags/Conda/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于蓝桥杯</title>
    <link href="http://example.com/2023/03/14/%E5%85%B3%E4%BA%8E%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <id>http://example.com/2023/03/14/%E5%85%B3%E4%BA%8E%E8%93%9D%E6%A1%A5%E6%9D%AF/</id>
    <published>2023-03-14T13:45:28.000Z</published>
    <updated>2023-07-20T11:13:23.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><h2 id="LED指示灯"><a href="#LED指示灯" class="headerlink" title="LED指示灯"></a>LED指示灯</h2><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/LED.jpg"                                     ><br>锁存器(M74HC573MIR)用io控制对应led，三八译码器控制y4(0)以控制y4c以控制锁存器使能</p></blockquote><h2 id="蜂鸣器与继电器"><a href="#蜂鸣器与继电器" class="headerlink" title="蜂鸣器与继电器"></a>蜂鸣器与继电器</h2><p>ULN2003达林顿管</p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/ULN.jpg"                                     ><br><strong>输出为输入的非</strong></p></blockquote><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/fmq.jpg"                                     ><br>通过三八译码器控制y5(低电平有效)控制y5c以控制锁存器使能，在通过锁存器及达林顿管(类非门)控制端口达到控制蜂鸣器及继电器作用</p></blockquote><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/SMG.jpg"                                     ></p></blockquote><h3 id="共阳数码管段位表"><a href="#共阳数码管段位表" class="headerlink" title="共阳数码管段位表"></a>共阳数码管段位表</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0--0xC0</span><br><span class="line">1--0xF9</span><br><span class="line">2--0xA4</span><br><span class="line">3--0xB0</span><br><span class="line">4--0x99</span><br><span class="line">5--0x92</span><br><span class="line">6--0x82</span><br><span class="line">7--0xF8</span><br><span class="line">8--0x80</span><br><span class="line">9--0x90</span><br></pre></td></tr></table></figure></div><p>列表形式为</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共阳</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> smg_yang = [<span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>, <span class="number">0x80</span>, <span class="number">0x90</span>] <span class="comment">// 对应0-9</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> smg_dot[<span class="number">10</span>] = &#123;<span class="number">0x40</span>, <span class="number">0x79</span>, <span class="number">0x24</span>, <span class="number">0x30</span>, <span class="number">0x19</span>, <span class="number">0x12</span>, <span class="number">0x02</span>, <span class="number">0x78</span>, <span class="number">0x00</span>, <span class="number">0x10</span>&#125;; <span class="comment">// 带小数点 由不带小数点的段码减去0x80</span></span><br></pre></td></tr></table></figure></div><h3 id="共阴数码管段位表"><a href="#共阴数码管段位表" class="headerlink" title="共阴数码管段位表"></a>共阴数码管段位表</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0--0x3F</span><br><span class="line">1--0x06</span><br><span class="line">2--0x5B</span><br><span class="line">3--0x4F</span><br><span class="line">4--0x66</span><br><span class="line">5--0x6D</span><br><span class="line">6--0x7D</span><br><span class="line">7--0x07</span><br><span class="line">8--0x7F</span><br><span class="line">9--0x6F</span><br></pre></td></tr></table></figure></div><p>列表形式为</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共阴</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> smg_yin = [<span class="number">0x3F</span>, <span class="number">0x06</span>, <span class="number">0x5B</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x7D</span>, <span class="number">0x07</span>, <span class="number">0x7F</span>, <span class="number">0x6F</span>] <span class="comment">// 对应0-9</span></span><br></pre></td></tr></table></figure></div><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/KEY.jpg"                                     ><br><strong>对于蓝桥板子 P37换为P44 P36换为P42</strong></p></blockquote><h3 id="独立按键"><a href="#独立按键" class="headerlink" title="独立按键"></a>独立按键</h3><p>需将J5的跳帽接到<code>2~3</code>引脚<br>0为按下</p><h3 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h3><blockquote><p>需将J5的跳帽接到<code>1~2</code>引脚</p></blockquote><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/ZHONGDUAN.jpg"                                     ><br>需将J5的跳帽接到<code>2~3</code>引脚<br>即s5接到p32&#x2F;int0 s4接到p33&#x2F;int1</p></blockquote><h2 id="DB18B20"><a href="#DB18B20" class="headerlink" title="DB18B20"></a>DB18B20</h2><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/DB18B20.jpg"                                     ><br>依据流程图 相关代码如下</p></blockquote><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">read_ds18b20</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LSB, MSB;</span><br><span class="line"></span><br><span class="line">init_ds18b20();</span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>); <span class="comment">// 跳过rom操作</span></span><br><span class="line">Write_DS18B20(<span class="number">0x44</span>); <span class="comment">// 开始读</span></span><br><span class="line"></span><br><span class="line">delay_ds18b20(<span class="number">1000</span>);</span><br><span class="line">init_ds18b20();</span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>); <span class="comment">// 跳过rom操作</span></span><br><span class="line">Write_DS18B20(<span class="number">0xbe</span>);</span><br><span class="line"></span><br><span class="line">LSB = Read_DS18B20(); <span class="comment">// 低八位</span></span><br><span class="line">MSB = Read_DS18B20(); <span class="comment">// 高八位</span></span><br><span class="line"></span><br><span class="line">temp = MSB;</span><br><span class="line">temp = (temp &lt;&lt; <span class="number">8</span>) | LSB;</span><br><span class="line"><span class="keyword">if</span>(temp &amp; <span class="number">0xf800</span> == <span class="number">0x0000</span>) <span class="comment">// 判断高五位（符号位）此处为判断正数</span></span><br><span class="line">&#123;</span><br><span class="line">temp &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">temp = temp * <span class="number">10</span>;</span><br><span class="line">temp = temp + (LSB &amp; <span class="number">0x0f</span>) * <span class="number">0.625</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="DS1302"><a href="#DS1302" class="headerlink" title="DS1302"></a>DS1302</h2><blockquote><p>采用三线spi接口<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/DS1302.jpg"                                     ></p></blockquote><blockquote><p>日历时钟寄存器<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/RLSZJCQ.jpg"                                     ></p></blockquote><hr><h1 id="备赛更新"><a href="#备赛更新" class="headerlink" title="备赛更新"></a>备赛更新</h1><h2 id="HC138模块选择"><a href="#HC138模块选择" class="headerlink" title="HC138模块选择"></a>HC138模块选择</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">selete_hc138</span><span class="params">(u8 num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">HC138_A = <span class="number">0</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_C = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">HC138_A = <span class="number">0</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">HC138_A = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">HC138_A = <span class="number">0</span>;</span><br><span class="line">HC138_B = <span class="number">1</span>;</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">HC138_A = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">1</span>;</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>其中<br>4 为LED<br>5 为继电器及蜂鸣器 0x10为继电器闭合 亮灯(L10)<br>6 为数码管位选<br>7 为数码管段选</p></blockquote><h2 id="数码管显示"><a href="#数码管显示" class="headerlink" title="数码管显示"></a>数码管显示</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fmq_display</span><span class="params">(u8 pos,u8 num)</span></span><br><span class="line">&#123;</span><br><span class="line">selete_hc138(<span class="number">6</span>);</span><br><span class="line">P0 = (<span class="number">0X01</span> &lt;&lt; pos) ;</span><br><span class="line">selete_hc138(<span class="number">7</span>);</span><br><span class="line">P0 = num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>进行关灯等</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">system_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">selete_hc138(<span class="number">0</span>);</span><br><span class="line">P0 = <span class="number">0x00</span>;</span><br><span class="line">selete_hc138(<span class="number">4</span>);</span><br><span class="line">P0 = <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="温度模块-DS18B20"><a href="#温度模块-DS18B20" class="headerlink" title="温度模块-DS18B20"></a>温度模块-DS18B20</h2><h3 id="驱动文件修改"><a href="#驱动文件修改" class="headerlink" title="驱动文件修改"></a>驱动文件修改</h3><blockquote><p><strong>对于蓝桥杯的板子，由于其运行速度较快，官方给的驱动文件需要进行修改，将内部延时函数改为如下</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay_OneWire</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>  </span><br><span class="line">&#123;</span><br><span class="line">t *= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(t --);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>即 将输入的延时时间放大十倍</p></blockquote><h3 id="温度读取"><a href="#温度读取" class="headerlink" title="温度读取"></a>温度读取</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> temp_f;</span><br><span class="line">u16 temp_i;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rd_tempture</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">u16 temp;</span><br><span class="line">u8 high, low;</span><br><span class="line">init_ds18b20();</span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);</span><br><span class="line">Write_DS18B20(<span class="number">0x44</span>);</span><br><span class="line"></span><br><span class="line">init_ds18b20();</span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);</span><br><span class="line">Write_DS18B20(<span class="number">0xbe</span>);</span><br><span class="line"></span><br><span class="line">low = Read_DS18B20();</span><br><span class="line">high = Read_DS18B20();</span><br><span class="line"></span><br><span class="line">init_ds18b20();</span><br><span class="line"></span><br><span class="line">temp = (high &lt;&lt; <span class="number">8</span>) | low;</span><br><span class="line">temp_f = temp * <span class="number">0.0625</span>;</span><br><span class="line">temp_i = temp_f * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>其中temp_f为当前温度值，以<code>float</code>储存，在使用时根据所需进行放大并转为<code>int</code>储存在temp_i中便于数码管显示</p></blockquote><h2 id="内置日历时钟定时器-ds1302"><a href="#内置日历时钟定时器-ds1302" class="headerlink" title="内置日历时钟定时器-ds1302"></a>内置日历时钟定时器-ds1302</h2><h3 id="寄存器表"><a href="#寄存器表" class="headerlink" title="寄存器表"></a>寄存器表</h3><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lanqiao/RLSZJCQ.jpg"                                     ><br>注意<br>高四位及第四位以bcd码储存<br>以读秒为例子，取出<code>81H</code>地址中的值时，高八位储存的为十位，即<code>time[0] / 16</code>为十位，<code>time[0] % 16</code>为个位。</p></blockquote><h3 id="日历读取及使用"><a href="#日历读取及使用" class="headerlink" title="日历读取及使用"></a>日历读取及使用</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">u8 code READ_RTC_ADDR[<span class="number">7</span>] = &#123;<span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0x85</span>, <span class="number">0x87</span>, <span class="number">0x89</span>, <span class="number">0x8b</span>, <span class="number">0x8d</span>&#125;; <span class="comment">// 对应寄存器地址</span></span><br><span class="line">u8 code WRITE_RTC_ADDR[<span class="number">7</span>] = &#123;<span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x86</span>, <span class="number">0x88</span>, <span class="number">0x8a</span>, <span class="number">0x8c</span>&#125;;</span><br><span class="line"></span><br><span class="line">u8 time[] = &#123;<span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x20</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x23</span>&#125;; <span class="comment">// 用于初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ds1302_init</span><span class="params">()</span> <span class="comment">// 初始化</span></span><br><span class="line">&#123;</span><br><span class="line">u8 i;</span><br><span class="line"> Write_Ds1302_Byte(<span class="number">0x8e</span>, <span class="number">0x00</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Write_Ds1302_Byte(WRITE_RTC_ADDR[i], time[i]);</span><br><span class="line">&#125;</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>, <span class="number">0x80</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rd_ds1302</span><span class="params">()</span> <span class="comment">// 读取</span></span><br><span class="line">&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">time[i] = Read_Ds1302_Byte(READ_RTC_ADDR[i]); <span class="comment">// 储存于对应地址中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下为调用示例 输出小时及分钟数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ds1302_display_1</span><span class="params">()</span><span class="comment">// 时分</span></span><br><span class="line">&#123;</span><br><span class="line">rd_ds1302();</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">0</span>, <span class="number">0xc1</span>); <span class="comment">// U</span></span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">0</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">1</span>, num_nodot[<span class="number">2</span>]);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">1</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">3</span>, num_nodot[time[<span class="number">2</span>] / <span class="number">16</span>]);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">3</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">4</span>, num_nodot[time[<span class="number">2</span>] % <span class="number">16</span>]);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">4</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">5</span>, <span class="number">0xbf</span>);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">5</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">6</span>, num_nodot[time[<span class="number">1</span>] / <span class="number">16</span>]);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">6</span>, <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">fmq_display(<span class="number">7</span>, num_nodot[time[<span class="number">1</span>] % <span class="number">16</span>]);</span><br><span class="line">delay(<span class="number">200</span>);</span><br><span class="line">fmq_display(<span class="number">7</span>, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="PCF8591"><a href="#PCF8591" class="headerlink" title="PCF8591"></a>PCF8591</h2><blockquote><p>关于IIC的使用</p></blockquote><h3 id="模数转换-ad"><a href="#模数转换-ad" class="headerlink" title="模数转换-ad"></a>模数转换-ad</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 驱动如下</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Ad_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">IIC_Start();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0x90</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(addr);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_Start();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0x91</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">temp = IIC_RecByte();</span><br><span class="line">IIC_SendAck(<span class="number">1</span>);</span><br><span class="line">IIC_Stop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以下为使用该接口读取滑动变阻器的值</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ad_display</span><span class="params">(u8 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">dat = Ad_Read(<span class="number">0x03</span>); <span class="comment">// 滑动变阻器的对应地址 光敏电阻为01</span></span><br><span class="line"><span class="comment">// dat = Ad_Read(0x01); // 光敏电阻</span></span><br><span class="line">fmq_display(<span class="number">0</span>, num_nodot[dat / <span class="number">100</span>]);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">fmq_display(<span class="number">0</span>, <span class="number">0xff</span>);</span><br><span class="line">fmq_display(<span class="number">1</span>, num_nodot[dat / <span class="number">10</span> % <span class="number">10</span>]);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">fmq_display(<span class="number">1</span>, <span class="number">0xff</span>);</span><br><span class="line">fmq_display(<span class="number">2</span>, num_nodot[dat % <span class="number">10</span>]);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">fmq_display(<span class="number">2</span>, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>需要注意的是 读取的值均有稳定倍数关系 需要 <code>* 5 / 255</code> 即 <code>/ 51</code> 即得到正常值</p></blockquote><h3 id="数模转换-da"><a href="#数模转换-da" class="headerlink" title="数模转换-da"></a>数模转换-da</h3><blockquote><p>输出值为板子D&#x2F;A输出口的电压(有换算关系 为 *5 &#x2F; 255)</p></blockquote><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Da_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_Start();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0x90</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0x41</span>);<span class="comment">//使能</span></span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(dat);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="AT24C02"><a href="#AT24C02" class="headerlink" title="AT24C02"></a>AT24C02</h2><blockquote><p>集成EEPROM</p></blockquote><h3 id="向EEPROM写入数据"><a href="#向EEPROM写入数据" class="headerlink" title="向EEPROM写入数据"></a>向EEPROM写入数据</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * <span class="built_in">string</span>, <span class="type">unsigned</span> <span class="type">char</span> addr, <span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_Start();</span><br><span class="line">IIC_SendByte(<span class="number">0xA0</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(addr); <span class="comment">// 标记为对应EEPROM地址</span></span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num --)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SendByte(*<span class="built_in">string</span> ++); </span><br><span class="line">IIC_WaitAck();</span><br><span class="line">IIC_Delay(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">IIC_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用即</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EEPROM_Write(temp, <span class="number">0x01</span>, <span class="number">2</span>); <span class="comment">// 0x01为对应地址</span></span><br></pre></td></tr></table></figure></div><h3 id="读取EEPROM数据"><a href="#读取EEPROM数据" class="headerlink" title="读取EEPROM数据"></a>读取EEPROM数据</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* <span class="built_in">string</span>, <span class="type">unsigned</span> <span class="type">char</span> addr, <span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_Start();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0xA0</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(addr);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line">IIC_Start();</span><br><span class="line"></span><br><span class="line">IIC_SendByte(<span class="number">0xA1</span>);</span><br><span class="line">IIC_WaitAck();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num --)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="built_in">string</span> ++ = IIC_RecByte();</span><br><span class="line"><span class="keyword">if</span>(num)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SendAck(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_SendAck(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">IIC_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用即</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EEPROM_Read(date, <span class="number">0x01</span>, <span class="number">2</span>); <span class="comment">// 从0x01地址中读取值存入date数组</span></span><br></pre></td></tr></table></figure></div><hr><h1 id="赛后更新"><a href="#赛后更新" class="headerlink" title="赛后更新"></a>赛后更新</h1><h2 id="4-8"><a href="#4-8" class="headerlink" title="4.8"></a>4.8</h2><p>一点小牢骚</p><blockquote><p>总的来说 尽力了<br>剩下一个ne555赌它不考来着。。。您猜怎么着？上来就给我来一手ne555<br>看到程序框图的第一反应人是傻的。。。</p><p>官方给的文件和原来手上的不一样也是想不到的<br>幸好 c语言没白学 头文件没忘记怎么写</p><p><code>_nop()_</code>在哪个头文件里我忘记了…。<br>看着报错人也麻麻的<br>还是幸好 知道这个函数是干嘛用的 自己手写了一个延时函数大概能代替它了</p><p>幸好的幸好，除了用ne555做的湿度之外基本上都功能实现了 虽然有些地方好像写法很复杂</p><p>其实做完能做的之后还剩下一个小时的样子<br>看着ne555的手册和stc15的手册 本来想现学一手 想想 算了<br>于是又去检查前面的题目有没有问题了</p><p>这次比赛嘛 也不清楚到底比之前的难还是简单了<br>有幸运也有遗憾<br>我的建议是 尽力了 下次一定 如果有下次的话</p></blockquote>]]></content>
    
    
    <summary type="html">准备2023蓝桥杯中所记录的相关笔记</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="蓝桥杯" scheme="http://example.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-Pytorch</title>
    <link href="http://example.com/2023/03/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch/"/>
    <id>http://example.com/2023/03/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch/</id>
    <published>2023-03-14T13:29:53.000Z</published>
    <updated>2023-07-09T12:06:24.998Z</updated>
    
    <content type="html"><![CDATA[<p>此为本人学习深度学习及Pytorch基础知识时所作，可能存在部分错误之处，敬请谅解。</p><h1 id="TensorBoard"><a href="#TensorBoard" class="headerlink" title="TensorBoard"></a>TensorBoard</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(&quot;logs&quot;) # 创建实例，将事件文件储存到logs文件夹下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_path = &quot;./training_dataset/train/ants_image/0013035.jpg&quot;</span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">writer.add_image(&quot;test&quot;, img, 1, dataformats = &quot;HWC&quot;) # 图像工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(100):</span><br><span class="line">    writer.add_scalar(&quot;y = 3x&quot;, 3*i, i) # 画函数工具</span><br><span class="line"></span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>其中，对<code>writer.add_image(&quot;test&quot;, img, 1, dataformats = &quot;HWC&quot;)</code> <br><code>1</code>为步数，dataformats为格式</p><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=logs</span><br><span class="line"># 其中logdir=事件文件所在文件夹名</span><br></pre></td></tr></table></figure></div><p>输出内容为<code>TensorBoard 2.10.0 at http://localhost:6006/ (Press CTRL+C to quit)</code><br>表示在端口6006训练\</p><p>可用<code>tensorboard --logdir=logs --port=6007</code>指定端口</p><h1 id="TransForms"><a href="#TransForms" class="headerlink" title="TransForms"></a>TransForms</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from torchvision import transforms</span><br><span class="line">img_path = &quot;./training_dataset/train/ants_image/0013035.jpg&quot;</span><br><span class="line">img = Image.open(img_path)</span><br><span class="line"></span><br><span class="line"># Totensor</span><br><span class="line">trans_totensor = transforms.ToTensor() # 创建对应工具</span><br><span class="line">tensor_img = trans_totensor(img) # 转化为tensor数据类型</span><br><span class="line">writer.add_image(&quot;ToTensor&quot;, tensor_img)</span><br><span class="line"></span><br><span class="line"># Normalize</span><br><span class="line">trans_norm = transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])</span><br><span class="line">img_norm = trans_norm(tensor_img) # 归一化</span><br><span class="line">writer.add_image(&quot;Normalize&quot;, img_norm)</span><br><span class="line"></span><br><span class="line"># Resize</span><br><span class="line">trans_resize = transforms.Resize((512, 512))</span><br><span class="line">img_resize = trans_resize(img)</span><br><span class="line">img_resize = trans_totensor(img_resize) # 改变大小</span><br><span class="line">writer.add_image(&quot;Resize&quot;, img_resize, 0)</span><br><span class="line"></span><br><span class="line"># Compose - resize - 2</span><br><span class="line">trans_resize_2 = transforms.Resize(512)</span><br><span class="line">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class="line">img_resize_2 = trans_compose(img) # 按比例改变大小</span><br><span class="line">writer.add_image(&quot;Resize2&quot;, img_resize_2, 0)</span><br><span class="line"></span><br><span class="line"># RandomCrop</span><br><span class="line">trans_random = transforms.RandomCrop(512) # 括号内用于指定大小，可分别指定长宽</span><br><span class="line">trans_conpose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class="line">for i in range(10):</span><br><span class="line">    img_crop = trans_conpose_2(img)</span><br><span class="line">    writer.add_image(&quot;RandomCrop&quot;, img_crop, i) # 随机裁剪</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></div><h1 id="torchvision"><a href="#torchvision" class="headerlink" title="torchvision"></a>torchvision</h1><h2 id="官方数据集下载"><a href="#官方数据集下载" class="headerlink" title="官方数据集下载"></a>官方数据集下载</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data = torchvision.datasets.CIFAR10(root = &quot;./dataset_test&quot;, train = True, transform = dataset_transform, download = True)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root = &quot;./dataset_test&quot;, train = False, transform = dataset_transform, download = True)</span><br></pre></td></tr></table></figure></div><p>root为本地下载存放地址<br>train为True为下载训练集 为False为下载测试集<br>transform为图片转化的工具 如<code>dataset_transform = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])</code><br>download为是否下载该数据集</p><h2 id="数据集内容-例"><a href="#数据集内容-例" class="headerlink" title="数据集内容 例"></a>数据集内容 例</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img, target = test_set[0]</span><br></pre></td></tr></table></figure></div><p>对应输出为<br><code>(&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x106B06F4E50&gt;, 3)</code><br>(此处前部分为不经过transform进行变换的默认PIL格式照片)<br>前部分为图片，后部分为该图片对应的对象在classes(test_set.classes)中的下标<br>若为</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_set.classes[target]</span><br></pre></td></tr></table></figure></div><p>则输出对应为<code>cat</code></p><h1 id="dataloader"><a href="#dataloader" class="headerlink" title="dataloader"></a>dataloader</h1><p>数据加载器</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_loader = DataLoader(dataset = test_data, batch_size = 4, shuffle = True, num_workers = 0, drop_last = False)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>dataset为指定数据集(测试集)<br>batch_size为指定每次从dataset中去除n个数据进行打包<br>shuffle若为True则每次训练会打乱顺序 一般为True<br>num_work为主进程数量<br>drop_last为保存最后一次取的数据</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 准备测试集</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root = &quot;./dataset_test&quot;, train = False, transform = torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset = test_data, batch_size = 4, shuffle = True, num_workers = 0, drop_last = False)</span><br><span class="line"></span><br><span class="line"># 测试集中第一张照片及target</span><br><span class="line">img, target = test_data[0]</span><br><span class="line"></span><br><span class="line"># 得到总的imgs与targets</span><br><span class="line">writer = SummaryWriter(&quot;dataloader_logs&quot;)</span><br><span class="line">step = 0</span><br><span class="line">for data in test_loader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(&quot;test_data&quot;, imgs, step)</span><br><span class="line">    step += 1</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></div><h1 id="convolution-functional"><a href="#convolution-functional" class="headerlink" title="convolution functional"></a>convolution functional</h1><h2 id="卷积层-代码"><a href="#卷积层-代码" class="headerlink" title="卷积层 代码"></a>卷积层 代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F # 卷积函数</span><br><span class="line"></span><br><span class="line">input = torch.tensor([[1, 2, 0, 3, 1],</span><br><span class="line">                      [0, 1, 2, 3, 1],</span><br><span class="line">                      [1, 2, 1, 0, 0],</span><br><span class="line">                      [5, 2, 3, 1, 1],</span><br><span class="line">                      [2, 1, 0, 1, 1]])</span><br><span class="line">    </span><br><span class="line">kernel = torch.tensor([[1, 2, 1],</span><br><span class="line">                       [0, 1, 0],</span><br><span class="line">                       [2, 1, 0]])</span><br><span class="line"></span><br><span class="line">input = torch.reshape(input,(1, 1, 5, 5)) # 更改尺寸为(1, 1, 5, 5)</span><br><span class="line">kernel = torch.reshape(kernel,(1, 1, 3, 3)) # 更改尺寸为(1, 1, 3, 3)</span><br><span class="line"></span><br><span class="line">output = F.conv2d(input, kernel, stride = 1, padding = 0)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure></div><p>对于<code>torch.reshape(input,(1, 1, 5, 5))</code><br>shape为四通道<br>第一位为channel通道数量<br>第二位为输入channel&#x2F;group(batch_size)<br>三四位分别为高和宽<br>及有dilation 空洞卷积</p><p><code>F.conv2d</code>意为二维卷积<br>stride为卷积核移动步数，padding为填充情况</p><h2 id="conv2d小历程"><a href="#conv2d小历程" class="headerlink" title="conv2d小历程"></a>conv2d小历程</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import Conv2d</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(&quot;./conv2d_dataset&quot;, train = False, transform = torchvision.transforms.ToTensor(),download = True)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size = 64)</span><br><span class="line"></span><br><span class="line">class Fun(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Fun, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels = 3, out_channels = 6, kernel_size = 3, stride = 1, padding = 1)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">test = Fun()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(&quot;con2d_logs&quot;)</span><br><span class="line">step = 0</span><br><span class="line"></span><br><span class="line">for data in dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = test(imgs)</span><br><span class="line"></span><br><span class="line">    writer.add_images(&quot;input&quot;, imgs, step)</span><br><span class="line"></span><br><span class="line">    output = torch.reshape(output, (-1, 3, 32, 32))</span><br><span class="line">    writer.add_images(&quot;output&quot;,output, step)</span><br><span class="line"></span><br><span class="line">    step += 1</span><br></pre></td></tr></table></figure></div><p>将数据集中的图片进行卷积操作，即卷积层</p><h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(&quot;maxpool_data&quot;, train = False, download = True, transform = torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataLoader = DataLoader(dataset, batch_size= 64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Test(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Test, self).__init__()</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(kernel_size = 3, ceil_mode = True)</span><br><span class="line"></span><br><span class="line">    def forward(self,input):</span><br><span class="line">        output = self.maxpool1(input)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line">step = 0</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(&quot;maxpool_logs&quot;)</span><br><span class="line">for data in dataLoader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(&quot;input&quot;, imgs, step)</span><br><span class="line"></span><br><span class="line">    output = test(imgs)</span><br><span class="line">    writer.add_images(&quot;output&quot;, output, step)</span><br><span class="line">    step += 1</span><br></pre></td></tr></table></figure></div><p>其中<code>self.maxpool1 = nn.MaxPool2d()(kernel_size = 3, ceil_mode = True)</code>中的<code>ceil_mode</code> 为补全，为True即当kernel加载到不满九个数据的位置时仍然计</p><p>池化可以缩减目标空间 增加运行速度</p><h2 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(&quot;maxpool_data&quot;, train = False, download = True, transform = torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size = 64)</span><br><span class="line"></span><br><span class="line">class test(torch.nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(test, self).__init__()</span><br><span class="line">        self.relu1 = torch.nn.ReLU()</span><br><span class="line">        self.sigmoid1 = torch.nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        output = self.relu1(input)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">test = test()</span><br><span class="line">writer = SummaryWriter(&quot;relu_logs&quot;)</span><br><span class="line">step = 0</span><br><span class="line"></span><br><span class="line">for  data in dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(&quot;input&quot;, imgs, step)</span><br><span class="line">    output = test(imgs)</span><br><span class="line">    writer.add_images(&quot;output&quot;, output, step)</span><br><span class="line">    step += 1</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></div><h2 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from modulefinder import Module</span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">import torch</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(&quot;maxpool_data&quot;, train = False, download = True, transform = torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size = 64)</span><br><span class="line"></span><br><span class="line">class test(torch.nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(test, self).__init__()</span><br><span class="line">        self.linear1 = torch.nn.Linear(196608, 10)</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        output = self.linear1(input)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">test = test()</span><br><span class="line"></span><br><span class="line">for data in dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    print(imgs.shape)</span><br><span class="line">    # output = torch.reshape(imgs, (1, 1, 1, -1))</span><br><span class="line">    output = torch.flatten(imgs) # 将矩阵展开成一行</span><br><span class="line">    print(output.shape)</span><br><span class="line">    output = test(output)</span><br><span class="line">    print(output.shape)</span><br></pre></td></tr></table></figure></div><p>也作为全连接层？</p><h2 id="Sequential及网络搭建小历程"><a href="#Sequential及网络搭建小历程" class="headerlink" title="Sequential及网络搭建小历程"></a>Sequential及网络搭建小历程</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class test(torch.nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(test, self).__init__()</span><br><span class="line">        # self.conv1 = torch.nn.Conv2d(3, 32, 5, padding = 2)</span><br><span class="line">        # self.maxpool1 = torch.nn.MaxPool2d(2)</span><br><span class="line">        # self.conv2 = torch.nn.Conv2d(32, 32, 5, padding = 2)</span><br><span class="line">        # self.maxpool2 = torch.nn.MaxPool2d(2)</span><br><span class="line">        # self.conv3 = torch.nn.Conv2d(32, 64, 5, padding = 2)</span><br><span class="line">        # self.maxpool3 = torch.nn.MaxPool2d(2)</span><br><span class="line">        # self.flatten = torch.nn.Flatten()</span><br><span class="line">        # self.linear1 = torch.nn.Linear(1024, 64)</span><br><span class="line">        # self.linear2 = torch.nn.Linear(64, 10)</span><br><span class="line"></span><br><span class="line">        self.model1 = torch.nn.Sequential(</span><br><span class="line">                                torch.nn.Conv2d(3, 32, 5, padding = 2),</span><br><span class="line">                                torch.nn.MaxPool2d(2),</span><br><span class="line">                                torch.nn.Conv2d(32, 32, 5, padding = 2),</span><br><span class="line">                                torch.nn.MaxPool2d(2),</span><br><span class="line">                                torch.nn.Conv2d(32, 64, 5, padding = 2),</span><br><span class="line">                                torch.nn.MaxPool2d(2),</span><br><span class="line">                                torch.nn.Flatten(),</span><br><span class="line">                                torch.nn.Linear(1024, 64),</span><br><span class="line">                                torch.nn.Linear(64, 10)</span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        # x = self.conv1(x)</span><br><span class="line">        # x = self.maxpool1(x)</span><br><span class="line">        # x = self.conv2(x)</span><br><span class="line">        # x = self.maxpool2(x)</span><br><span class="line">        # x = self.conv3(x)</span><br><span class="line">        # x = self.maxpool3(x)</span><br><span class="line">        # x = self.flatten(x)</span><br><span class="line">        # x = self.linear1(x)</span><br><span class="line">        # x = self.linear2(x)</span><br><span class="line"></span><br><span class="line">        x = self.model1(x)</span><br><span class="line"></span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">test = test()</span><br><span class="line">print(test)</span><br><span class="line">input = torch.ones((64, 3, 32, 32))</span><br><span class="line">output = test(input)</span><br><span class="line">print(output.shape)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(&quot;seq_logs&quot;)</span><br><span class="line">write.add_graph(test, input) # 输出运行的树图</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure></div><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.tensor([1, 2, 3], dtype = torch.float32)</span><br><span class="line">targets = torch.tensor([1, 2, 5], dtype = torch.float32)</span><br><span class="line"></span><br><span class="line">inputs = torch.reshape(input, (1, 1, 1, 3))</span><br><span class="line">targets = torch.reshape(targets, (1, 1, 3, 1))</span><br><span class="line"></span><br><span class="line">loss = torch.nn.L1loss(reduction = &#x27;sum&#x27;)</span><br><span class="line">result = loss(inputs, targets)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">有关深度学习及Pytorch基础知识</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机视觉" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Pytorch" scheme="http://example.com/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Lingo</title>
    <link href="http://example.com/2023/03/14/Lingo/"/>
    <id>http://example.com/2023/03/14/Lingo/</id>
    <published>2023-03-14T13:26:36.000Z</published>
    <updated>2023-04-09T02:51:53.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lingo编写格式"><a href="#lingo编写格式" class="headerlink" title="lingo编写格式"></a>lingo编写格式</h1><h2 id="集合部分-SETS"><a href="#集合部分-SETS" class="headerlink" title="集合部分(SETS)"></a>集合部分(SETS)</h2><p>以<code>SETS</code>开始，以<code>ENDSETS</code>结束<br>用于定义必要变量<br>有两类集合</p><p>**原始集合:**<br>其定义格式为:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETENME/member list(or 1..n)/: attribute, attribute, etc.</span><br></pre></td></tr></table></figure></div><p><strong>导出集合</strong><br>引用其他集合定义的集合 其定义格式为:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SENTNAME(set1, set2, etc.): attribute, attribute, etc.</span><br></pre></td></tr></table></figure></div><p>若要在程序中使用数组，则必须在该部分定义<br>如</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person/1..10/:A;</span><br><span class="line">Task/1..12/:B;</span><br><span class="line">Link(Person, Task):X;</span><br></pre></td></tr></table></figure></div><h2 id="目标与约束"><a href="#目标与约束" class="headerlink" title="目标与约束"></a>目标与约束</h2><p>定义目标函数、约束条件等</p><h2 id="数据部分-DATA"><a href="#数据部分-DATA" class="headerlink" title="数据部分(DATA)"></a>数据部分(DATA)</h2><p>以<code>DATA: </code>开始，以<code>END DATA</code>结束<br>用于数据的输入<br>格式为：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attribute = value_list</span><br></pre></td></tr></table></figure></div><h2 id="初始化部分-INIT"><a href="#初始化部分-INIT" class="headerlink" title="初始化部分(INIT)"></a>初始化部分(INIT)</h2><p>以<code>INIT: </code>开始，以<code>END INIT</code>结束<br>用于对集合属性（数组）定义初值<br>格式为</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attribute=value_list</span><br></pre></td></tr></table></figure></div><h1 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h1><p>以<code>@</code>开头\</p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>常用<strong>数学函数</strong>如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ABS(X) 返回绝对值</span><br><span class="line">@COS(X) 返回余弦值</span><br><span class="line">@EXP(X) 返回e指数值</span><br><span class="line">@FLOOR(X) 返回靠近0的整数部分</span><br><span class="line">@LGM(X) 返回Γ函数自然对数值</span><br><span class="line">@LOG(X) 返回x自然对数值</span><br><span class="line">@SIGN(X) 返回符号值 负数为-1 正数为1</span><br><span class="line">@SIN(X)  返回正弦 x为弧度制</span><br><span class="line">@SMAX(X1, X2···, Xn) 返回最大值</span><br><span class="line">@SMIN(X) (X1, X2···, Xn) 返回最小值</span><br><span class="line">@TAN(X) 返回正切值</span><br></pre></td></tr></table></figure></div><h2 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h2><p><strong>集合函数格式</strong>如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_operator(set_name|condition:expression)</span><br></pre></td></tr></table></figure></div><p>其中<code>set_operator</code>为集合函数名<br><code>set_name</code>为数据集合名<br> <code>condition</code>为表达式<br><code>|expression</code>为条件，用逻辑表达式描述（无条件可省略）</p><p>逻辑表达式中 有如下运算符</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#AND# 与</span><br><span class="line">#OR# 或</span><br><span class="line">#NOT# 非</span><br><span class="line"></span><br><span class="line">#EQ# 等于</span><br><span class="line">#NE# 不等于</span><br><span class="line">#GT# 大于</span><br><span class="line">#GE# 大于等于</span><br><span class="line">#LT# 小于</span><br><span class="line">#LE# 小于等于</span><br></pre></td></tr></table></figure></div><p>常见<code>集合函数</code>如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FOR(set_name: constraint) 对集合set_name的每个元素独立生成约束 由约束表达式constraint描述</span><br><span class="line">@MAX(set_name: exoression) 返回集合上最大值</span><br><span class="line">@MIN(set_name: exoression) 返回集合上最小值</span><br><span class="line">@SUN(set_name: exoression) 返回集合上的表达式exoression的和</span><br><span class="line">@SIZE(set_name) 返回元素个数</span><br><span class="line">@IN(set_name, set_element) 若set_name中包含set_element则返回1，反之返回0</span><br></pre></td></tr></table></figure></div><h2 id="变量界定函数"><a href="#变量界定函数" class="headerlink" title="变量界定函数"></a>变量界定函数</h2><p>变量函数对变量的取值范围的附加限制 由如下四种</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@BND(L, X, U)限制L≤X≤U</span><br><span class="line">@BIN(X) 限制x为1或0</span><br><span class="line">@FREE(X) 取消对x的符号限制(可取任意实数)</span><br><span class="line">@GIN(X) 限制x为整数值</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">Lingo基础语法</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学建模" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="Lingo" scheme="http://example.com/tags/Lingo/"/>
    
  </entry>
  
</feed>
